
STM32Lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000048  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e8  080062e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080062f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08006364  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08006364  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001158a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276b  00000000  00000000  0003162a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00034b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a28  00000000  00000000  00035870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108f9  00000000  00000000  00057298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbc9f  00000000  00000000  00067b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004164  00000000  00000000  00123880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006098 	.word	0x08006098

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006098 	.word	0x08006098

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f001 b8de 	b.w	80014a4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <selfrel_offset31>:
 80005d0:	6803      	ldr	r3, [r0, #0]
 80005d2:	005a      	lsls	r2, r3, #1
 80005d4:	bf4c      	ite	mi
 80005d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80005da:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80005de:	4418      	add	r0, r3
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <search_EIT_table>:
 80005e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005e8:	b329      	cbz	r1, 8000636 <search_EIT_table+0x52>
 80005ea:	1e4f      	subs	r7, r1, #1
 80005ec:	4604      	mov	r4, r0
 80005ee:	4615      	mov	r5, r2
 80005f0:	463e      	mov	r6, r7
 80005f2:	f04f 0800 	mov.w	r8, #0
 80005f6:	eb08 0106 	add.w	r1, r8, r6
 80005fa:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80005fe:	1049      	asrs	r1, r1, #1
 8000600:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000604:	4648      	mov	r0, r9
 8000606:	f7ff ffe3 	bl	80005d0 <selfrel_offset31>
 800060a:	4603      	mov	r3, r0
 800060c:	00c8      	lsls	r0, r1, #3
 800060e:	3008      	adds	r0, #8
 8000610:	428f      	cmp	r7, r1
 8000612:	4420      	add	r0, r4
 8000614:	d009      	beq.n	800062a <search_EIT_table+0x46>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d809      	bhi.n	800062e <search_EIT_table+0x4a>
 800061a:	f7ff ffd9 	bl	80005d0 <selfrel_offset31>
 800061e:	3801      	subs	r0, #1
 8000620:	42a8      	cmp	r0, r5
 8000622:	d20a      	bcs.n	800063a <search_EIT_table+0x56>
 8000624:	f101 0801 	add.w	r8, r1, #1
 8000628:	e7e5      	b.n	80005f6 <search_EIT_table+0x12>
 800062a:	42ab      	cmp	r3, r5
 800062c:	d905      	bls.n	800063a <search_EIT_table+0x56>
 800062e:	4588      	cmp	r8, r1
 8000630:	d001      	beq.n	8000636 <search_EIT_table+0x52>
 8000632:	1e4e      	subs	r6, r1, #1
 8000634:	e7df      	b.n	80005f6 <search_EIT_table+0x12>
 8000636:	f04f 0900 	mov.w	r9, #0
 800063a:	4648      	mov	r0, r9
 800063c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000640 <__gnu_unwind_get_pr_addr>:
 8000640:	2801      	cmp	r0, #1
 8000642:	d007      	beq.n	8000654 <__gnu_unwind_get_pr_addr+0x14>
 8000644:	2802      	cmp	r0, #2
 8000646:	d007      	beq.n	8000658 <__gnu_unwind_get_pr_addr+0x18>
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__gnu_unwind_get_pr_addr+0x1c>)
 800064a:	2800      	cmp	r0, #0
 800064c:	bf0c      	ite	eq
 800064e:	4618      	moveq	r0, r3
 8000650:	2000      	movne	r0, #0
 8000652:	4770      	bx	lr
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <__gnu_unwind_get_pr_addr+0x20>)
 8000656:	4770      	bx	lr
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <__gnu_unwind_get_pr_addr+0x24>)
 800065a:	4770      	bx	lr
 800065c:	08000d19 	.word	0x08000d19
 8000660:	08000d1d 	.word	0x08000d1d
 8000664:	08000d21 	.word	0x08000d21

08000668 <get_eit_entry>:
 8000668:	b530      	push	{r4, r5, lr}
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <get_eit_entry+0x90>)
 800066c:	b083      	sub	sp, #12
 800066e:	4604      	mov	r4, r0
 8000670:	1e8d      	subs	r5, r1, #2
 8000672:	b33b      	cbz	r3, 80006c4 <get_eit_entry+0x5c>
 8000674:	a901      	add	r1, sp, #4
 8000676:	4628      	mov	r0, r5
 8000678:	f3af 8000 	nop.w
 800067c:	b1e8      	cbz	r0, 80006ba <get_eit_entry+0x52>
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	462a      	mov	r2, r5
 8000682:	f7ff ffaf 	bl	80005e4 <search_EIT_table>
 8000686:	4601      	mov	r1, r0
 8000688:	b1b8      	cbz	r0, 80006ba <get_eit_entry+0x52>
 800068a:	f7ff ffa1 	bl	80005d0 <selfrel_offset31>
 800068e:	684b      	ldr	r3, [r1, #4]
 8000690:	64a0      	str	r0, [r4, #72]	; 0x48
 8000692:	2b01      	cmp	r3, #1
 8000694:	d02c      	beq.n	80006f0 <get_eit_entry+0x88>
 8000696:	2b00      	cmp	r3, #0
 8000698:	f101 0004 	add.w	r0, r1, #4
 800069c:	db24      	blt.n	80006e8 <get_eit_entry+0x80>
 800069e:	f7ff ff97 	bl	80005d0 <selfrel_offset31>
 80006a2:	2300      	movs	r3, #0
 80006a4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80006a8:	6803      	ldr	r3, [r0, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db11      	blt.n	80006d2 <get_eit_entry+0x6a>
 80006ae:	f7ff ff8f 	bl	80005d0 <selfrel_offset31>
 80006b2:	6120      	str	r0, [r4, #16]
 80006b4:	2000      	movs	r0, #0
 80006b6:	b003      	add	sp, #12
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	2300      	movs	r3, #0
 80006bc:	2009      	movs	r0, #9
 80006be:	6123      	str	r3, [r4, #16]
 80006c0:	b003      	add	sp, #12
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <get_eit_entry+0x94>)
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <get_eit_entry+0x98>)
 80006c8:	1ac9      	subs	r1, r1, r3
 80006ca:	10c9      	asrs	r1, r1, #3
 80006cc:	4618      	mov	r0, r3
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	e7d6      	b.n	8000680 <get_eit_entry+0x18>
 80006d2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006d6:	f7ff ffb3 	bl	8000640 <__gnu_unwind_get_pr_addr>
 80006da:	2800      	cmp	r0, #0
 80006dc:	6120      	str	r0, [r4, #16]
 80006de:	bf14      	ite	ne
 80006e0:	2000      	movne	r0, #0
 80006e2:	2009      	moveq	r0, #9
 80006e4:	b003      	add	sp, #12
 80006e6:	bd30      	pop	{r4, r5, pc}
 80006e8:	2301      	movs	r3, #1
 80006ea:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80006ee:	e7db      	b.n	80006a8 <get_eit_entry+0x40>
 80006f0:	2300      	movs	r3, #0
 80006f2:	6123      	str	r3, [r4, #16]
 80006f4:	2005      	movs	r0, #5
 80006f6:	e7de      	b.n	80006b6 <get_eit_entry+0x4e>
 80006f8:	00000000 	.word	0x00000000
 80006fc:	08006208 	.word	0x08006208
 8000700:	080062e8 	.word	0x080062e8

08000704 <restore_non_core_regs>:
 8000704:	6803      	ldr	r3, [r0, #0]
 8000706:	07da      	lsls	r2, r3, #31
 8000708:	b510      	push	{r4, lr}
 800070a:	4604      	mov	r4, r0
 800070c:	d406      	bmi.n	800071c <restore_non_core_regs+0x18>
 800070e:	079b      	lsls	r3, r3, #30
 8000710:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000714:	d509      	bpl.n	800072a <restore_non_core_regs+0x26>
 8000716:	f000 fc5b 	bl	8000fd0 <__gnu_Unwind_Restore_VFP_D>
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	0759      	lsls	r1, r3, #29
 800071e:	d509      	bpl.n	8000734 <restore_non_core_regs+0x30>
 8000720:	071a      	lsls	r2, r3, #28
 8000722:	d50e      	bpl.n	8000742 <restore_non_core_regs+0x3e>
 8000724:	06db      	lsls	r3, r3, #27
 8000726:	d513      	bpl.n	8000750 <restore_non_core_regs+0x4c>
 8000728:	bd10      	pop	{r4, pc}
 800072a:	f000 fc49 	bl	8000fc0 <__gnu_Unwind_Restore_VFP>
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	0759      	lsls	r1, r3, #29
 8000732:	d4f5      	bmi.n	8000720 <restore_non_core_regs+0x1c>
 8000734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000738:	f000 fc52 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	071a      	lsls	r2, r3, #28
 8000740:	d4f0      	bmi.n	8000724 <restore_non_core_regs+0x20>
 8000742:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000746:	f000 fc53 	bl	8000ff0 <__gnu_Unwind_Restore_WMMXD>
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	06db      	lsls	r3, r3, #27
 800074e:	d4eb      	bmi.n	8000728 <restore_non_core_regs+0x24>
 8000750:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f000 bc8e 	b.w	8001078 <__gnu_Unwind_Restore_WMMXC>

0800075c <__gnu_unwind_24bit.constprop.0>:
 800075c:	2009      	movs	r0, #9
 800075e:	4770      	bx	lr

08000760 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000760:	4603      	mov	r3, r0
 8000762:	6800      	ldr	r0, [r0, #0]
 8000764:	b100      	cbz	r0, 8000768 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000766:	4418      	add	r0, r3
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <_Unwind_DebugHook>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <unwind_phase2>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	4604      	mov	r4, r0
 8000774:	460e      	mov	r6, r1
 8000776:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000778:	4620      	mov	r0, r4
 800077a:	f7ff ff75 	bl	8000668 <get_eit_entry>
 800077e:	4605      	mov	r5, r0
 8000780:	b988      	cbnz	r0, 80007a6 <unwind_phase2+0x36>
 8000782:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000784:	6162      	str	r2, [r4, #20]
 8000786:	6923      	ldr	r3, [r4, #16]
 8000788:	4632      	mov	r2, r6
 800078a:	4621      	mov	r1, r4
 800078c:	2001      	movs	r0, #1
 800078e:	4798      	blx	r3
 8000790:	2808      	cmp	r0, #8
 8000792:	d0f0      	beq.n	8000776 <unwind_phase2+0x6>
 8000794:	2807      	cmp	r0, #7
 8000796:	d106      	bne.n	80007a6 <unwind_phase2+0x36>
 8000798:	4628      	mov	r0, r5
 800079a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800079c:	f7ff ffe6 	bl	800076c <_Unwind_DebugHook>
 80007a0:	1d30      	adds	r0, r6, #4
 80007a2:	f000 fc01 	bl	8000fa8 <__restore_core_regs>
 80007a6:	f005 fc2b 	bl	8006000 <abort>
 80007aa:	bf00      	nop

080007ac <unwind_phase2_forced>:
 80007ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b0:	1d0d      	adds	r5, r1, #4
 80007b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80007b6:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80007ba:	4607      	mov	r7, r0
 80007bc:	4614      	mov	r4, r2
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80007c4:	f10d 0c0c 	add.w	ip, sp, #12
 80007c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007dc:	ae02      	add	r6, sp, #8
 80007de:	f04f 0e00 	mov.w	lr, #0
 80007e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80007e6:	f8c6 e000 	str.w	lr, [r6]
 80007ea:	e020      	b.n	800082e <unwind_phase2_forced+0x82>
 80007ec:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007f4:	4631      	mov	r1, r6
 80007f6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007f8:	f005 faa4 	bl	8005d44 <memcpy>
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000800:	4639      	mov	r1, r7
 8000802:	4650      	mov	r0, sl
 8000804:	4798      	blx	r3
 8000806:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000808:	6473      	str	r3, [r6, #68]	; 0x44
 800080a:	4621      	mov	r1, r4
 800080c:	e9cd 6900 	strd	r6, r9, [sp]
 8000810:	4605      	mov	r5, r0
 8000812:	463b      	mov	r3, r7
 8000814:	463a      	mov	r2, r7
 8000816:	2001      	movs	r0, #1
 8000818:	47c0      	blx	r8
 800081a:	4604      	mov	r4, r0
 800081c:	b9e0      	cbnz	r0, 8000858 <unwind_phase2_forced+0xac>
 800081e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000822:	a97a      	add	r1, sp, #488	; 0x1e8
 8000824:	4630      	mov	r0, r6
 8000826:	f005 fa8d 	bl	8005d44 <memcpy>
 800082a:	2d08      	cmp	r5, #8
 800082c:	d11a      	bne.n	8000864 <unwind_phase2_forced+0xb8>
 800082e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000830:	4638      	mov	r0, r7
 8000832:	f7ff ff19 	bl	8000668 <get_eit_entry>
 8000836:	3409      	adds	r4, #9
 8000838:	fa5f fa84 	uxtb.w	sl, r4
 800083c:	4605      	mov	r5, r0
 800083e:	2800      	cmp	r0, #0
 8000840:	d0d4      	beq.n	80007ec <unwind_phase2_forced+0x40>
 8000842:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000844:	6473      	str	r3, [r6, #68]	; 0x44
 8000846:	463a      	mov	r2, r7
 8000848:	e9cd 6900 	strd	r6, r9, [sp]
 800084c:	463b      	mov	r3, r7
 800084e:	f04a 0110 	orr.w	r1, sl, #16
 8000852:	2001      	movs	r0, #1
 8000854:	47c0      	blx	r8
 8000856:	b100      	cbz	r0, 800085a <unwind_phase2_forced+0xae>
 8000858:	2509      	movs	r5, #9
 800085a:	4628      	mov	r0, r5
 800085c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000864:	2d07      	cmp	r5, #7
 8000866:	d1f7      	bne.n	8000858 <unwind_phase2_forced+0xac>
 8000868:	4620      	mov	r0, r4
 800086a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800086c:	f7ff ff7e 	bl	800076c <_Unwind_DebugHook>
 8000870:	a803      	add	r0, sp, #12
 8000872:	f000 fb99 	bl	8000fa8 <__restore_core_regs>
 8000876:	bf00      	nop

08000878 <_Unwind_GetCFA>:
 8000878:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800087a:	4770      	bx	lr

0800087c <__gnu_Unwind_RaiseException>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000880:	640b      	str	r3, [r1, #64]	; 0x40
 8000882:	f101 0c04 	add.w	ip, r1, #4
 8000886:	460e      	mov	r6, r1
 8000888:	4605      	mov	r5, r0
 800088a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800088e:	b0f9      	sub	sp, #484	; 0x1e4
 8000890:	ac01      	add	r4, sp, #4
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80008a4:	f04f 37ff 	mov.w	r7, #4294967295
 80008a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ac:	9700      	str	r7, [sp, #0]
 80008ae:	e006      	b.n	80008be <__gnu_Unwind_RaiseException+0x42>
 80008b0:	692b      	ldr	r3, [r5, #16]
 80008b2:	466a      	mov	r2, sp
 80008b4:	4629      	mov	r1, r5
 80008b6:	4798      	blx	r3
 80008b8:	2808      	cmp	r0, #8
 80008ba:	4604      	mov	r4, r0
 80008bc:	d108      	bne.n	80008d0 <__gnu_Unwind_RaiseException+0x54>
 80008be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80008c0:	4628      	mov	r0, r5
 80008c2:	f7ff fed1 	bl	8000668 <get_eit_entry>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d0f2      	beq.n	80008b0 <__gnu_Unwind_RaiseException+0x34>
 80008ca:	2009      	movs	r0, #9
 80008cc:	b079      	add	sp, #484	; 0x1e4
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d0:	4668      	mov	r0, sp
 80008d2:	f7ff ff17 	bl	8000704 <restore_non_core_regs>
 80008d6:	2c06      	cmp	r4, #6
 80008d8:	d1f7      	bne.n	80008ca <__gnu_Unwind_RaiseException+0x4e>
 80008da:	4631      	mov	r1, r6
 80008dc:	4628      	mov	r0, r5
 80008de:	f7ff ff47 	bl	8000770 <unwind_phase2>
 80008e2:	bf00      	nop

080008e4 <__gnu_Unwind_ForcedUnwind>:
 80008e4:	60c1      	str	r1, [r0, #12]
 80008e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80008e8:	6182      	str	r2, [r0, #24]
 80008ea:	6419      	str	r1, [r3, #64]	; 0x40
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	e75c      	b.n	80007ac <unwind_phase2_forced>
 80008f2:	bf00      	nop

080008f4 <__gnu_Unwind_Resume>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	68c6      	ldr	r6, [r0, #12]
 80008f8:	6943      	ldr	r3, [r0, #20]
 80008fa:	640b      	str	r3, [r1, #64]	; 0x40
 80008fc:	b9ae      	cbnz	r6, 800092a <__gnu_Unwind_Resume+0x36>
 80008fe:	6903      	ldr	r3, [r0, #16]
 8000900:	460a      	mov	r2, r1
 8000902:	4604      	mov	r4, r0
 8000904:	460d      	mov	r5, r1
 8000906:	4601      	mov	r1, r0
 8000908:	2002      	movs	r0, #2
 800090a:	4798      	blx	r3
 800090c:	2807      	cmp	r0, #7
 800090e:	d005      	beq.n	800091c <__gnu_Unwind_Resume+0x28>
 8000910:	2808      	cmp	r0, #8
 8000912:	d10f      	bne.n	8000934 <__gnu_Unwind_Resume+0x40>
 8000914:	4629      	mov	r1, r5
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff ff2a 	bl	8000770 <unwind_phase2>
 800091c:	4630      	mov	r0, r6
 800091e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000920:	f7ff ff24 	bl	800076c <_Unwind_DebugHook>
 8000924:	1d28      	adds	r0, r5, #4
 8000926:	f000 fb3f 	bl	8000fa8 <__restore_core_regs>
 800092a:	2201      	movs	r2, #1
 800092c:	f7ff ff3e 	bl	80007ac <unwind_phase2_forced>
 8000930:	f005 fb66 	bl	8006000 <abort>
 8000934:	f005 fb64 	bl	8006000 <abort>

08000938 <__gnu_Unwind_Resume_or_Rethrow>:
 8000938:	68c2      	ldr	r2, [r0, #12]
 800093a:	b11a      	cbz	r2, 8000944 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800093c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800093e:	640a      	str	r2, [r1, #64]	; 0x40
 8000940:	2200      	movs	r2, #0
 8000942:	e733      	b.n	80007ac <unwind_phase2_forced>
 8000944:	e79a      	b.n	800087c <__gnu_Unwind_RaiseException>
 8000946:	bf00      	nop

08000948 <_Unwind_Complete>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <_Unwind_DeleteException>:
 800094c:	6883      	ldr	r3, [r0, #8]
 800094e:	4601      	mov	r1, r0
 8000950:	b10b      	cbz	r3, 8000956 <_Unwind_DeleteException+0xa>
 8000952:	2001      	movs	r0, #1
 8000954:	4718      	bx	r3
 8000956:	4770      	bx	lr

08000958 <_Unwind_VRS_Get>:
 8000958:	2901      	cmp	r1, #1
 800095a:	d012      	beq.n	8000982 <_Unwind_VRS_Get+0x2a>
 800095c:	d809      	bhi.n	8000972 <_Unwind_VRS_Get+0x1a>
 800095e:	b973      	cbnz	r3, 800097e <_Unwind_VRS_Get+0x26>
 8000960:	2a0f      	cmp	r2, #15
 8000962:	d80c      	bhi.n	800097e <_Unwind_VRS_Get+0x26>
 8000964:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000968:	4618      	mov	r0, r3
 800096a:	6853      	ldr	r3, [r2, #4]
 800096c:	9a00      	ldr	r2, [sp, #0]
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4770      	bx	lr
 8000972:	3903      	subs	r1, #3
 8000974:	2901      	cmp	r1, #1
 8000976:	bf94      	ite	ls
 8000978:	2001      	movls	r0, #1
 800097a:	2002      	movhi	r0, #2
 800097c:	4770      	bx	lr
 800097e:	2002      	movs	r0, #2
 8000980:	4770      	bx	lr
 8000982:	4608      	mov	r0, r1
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <_Unwind_GetGR>:
 8000988:	b500      	push	{lr}
 800098a:	b085      	sub	sp, #20
 800098c:	460a      	mov	r2, r1
 800098e:	2300      	movs	r3, #0
 8000990:	a903      	add	r1, sp, #12
 8000992:	9100      	str	r1, [sp, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f7ff ffdf 	bl	8000958 <_Unwind_VRS_Get>
 800099a:	9803      	ldr	r0, [sp, #12]
 800099c:	b005      	add	sp, #20
 800099e:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a2:	bf00      	nop

080009a4 <_Unwind_VRS_Set>:
 80009a4:	2901      	cmp	r1, #1
 80009a6:	d012      	beq.n	80009ce <_Unwind_VRS_Set+0x2a>
 80009a8:	d809      	bhi.n	80009be <_Unwind_VRS_Set+0x1a>
 80009aa:	b973      	cbnz	r3, 80009ca <_Unwind_VRS_Set+0x26>
 80009ac:	2a0f      	cmp	r2, #15
 80009ae:	d80c      	bhi.n	80009ca <_Unwind_VRS_Set+0x26>
 80009b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80009b4:	9a00      	ldr	r2, [sp, #0]
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	6042      	str	r2, [r0, #4]
 80009ba:	4618      	mov	r0, r3
 80009bc:	4770      	bx	lr
 80009be:	3903      	subs	r1, #3
 80009c0:	2901      	cmp	r1, #1
 80009c2:	bf94      	ite	ls
 80009c4:	2001      	movls	r0, #1
 80009c6:	2002      	movhi	r0, #2
 80009c8:	4770      	bx	lr
 80009ca:	2002      	movs	r0, #2
 80009cc:	4770      	bx	lr
 80009ce:	4608      	mov	r0, r1
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <_Unwind_SetGR>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	2300      	movs	r3, #0
 80009da:	ac03      	add	r4, sp, #12
 80009dc:	9203      	str	r2, [sp, #12]
 80009de:	9400      	str	r4, [sp, #0]
 80009e0:	460a      	mov	r2, r1
 80009e2:	4619      	mov	r1, r3
 80009e4:	f7ff ffde 	bl	80009a4 <_Unwind_VRS_Set>
 80009e8:	b004      	add	sp, #16
 80009ea:	bd10      	pop	{r4, pc}

080009ec <__gnu_Unwind_Backtrace>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	f102 0c04 	add.w	ip, r2, #4
 80009f6:	4605      	mov	r5, r0
 80009f8:	460c      	mov	r4, r1
 80009fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009fe:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000a02:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000a06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a1a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a1e:	f04f 36ff 	mov.w	r6, #4294967295
 8000a22:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000a26:	9616      	str	r6, [sp, #88]	; 0x58
 8000a28:	e010      	b.n	8000a4c <__gnu_Unwind_Backtrace+0x60>
 8000a2a:	f7ff ffd3 	bl	80009d4 <_Unwind_SetGR>
 8000a2e:	4621      	mov	r1, r4
 8000a30:	a816      	add	r0, sp, #88	; 0x58
 8000a32:	47a8      	blx	r5
 8000a34:	4603      	mov	r3, r0
 8000a36:	aa16      	add	r2, sp, #88	; 0x58
 8000a38:	4669      	mov	r1, sp
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	b983      	cbnz	r3, 8000a60 <__gnu_Unwind_Backtrace+0x74>
 8000a3e:	9b04      	ldr	r3, [sp, #16]
 8000a40:	4798      	blx	r3
 8000a42:	2805      	cmp	r0, #5
 8000a44:	4606      	mov	r6, r0
 8000a46:	d00c      	beq.n	8000a62 <__gnu_Unwind_Backtrace+0x76>
 8000a48:	2809      	cmp	r0, #9
 8000a4a:	d009      	beq.n	8000a60 <__gnu_Unwind_Backtrace+0x74>
 8000a4c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a4e:	4668      	mov	r0, sp
 8000a50:	f7ff fe0a 	bl	8000668 <get_eit_entry>
 8000a54:	4603      	mov	r3, r0
 8000a56:	466a      	mov	r2, sp
 8000a58:	210c      	movs	r1, #12
 8000a5a:	a816      	add	r0, sp, #88	; 0x58
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0e4      	beq.n	8000a2a <__gnu_Unwind_Backtrace+0x3e>
 8000a60:	2609      	movs	r6, #9
 8000a62:	a816      	add	r0, sp, #88	; 0x58
 8000a64:	f7ff fe4e 	bl	8000704 <restore_non_core_regs>
 8000a68:	4630      	mov	r0, r6
 8000a6a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}

08000a70 <__gnu_unwind_pr_common>:
 8000a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a74:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	461e      	mov	r6, r3
 8000a7a:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a7e:	9406      	str	r4, [sp, #24]
 8000a80:	460d      	mov	r5, r1
 8000a82:	4617      	mov	r7, r2
 8000a84:	f000 0803 	and.w	r8, r0, #3
 8000a88:	2e00      	cmp	r6, #0
 8000a8a:	d079      	beq.n	8000b80 <__gnu_unwind_pr_common+0x110>
 8000a8c:	0c1a      	lsrs	r2, r3, #16
 8000a8e:	041b      	lsls	r3, r3, #16
 8000a90:	9305      	str	r3, [sp, #20]
 8000a92:	f88d 201d 	strb.w	r2, [sp, #29]
 8000a96:	2302      	movs	r3, #2
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a9e:	f88d 301c 	strb.w	r3, [sp, #28]
 8000aa2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000aa4:	f1b8 0f02 	cmp.w	r8, #2
 8000aa8:	bf08      	it	eq
 8000aaa:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000aac:	f013 0301 	ands.w	r3, r3, #1
 8000ab0:	d00c      	beq.n	8000acc <__gnu_unwind_pr_common+0x5c>
 8000ab2:	a905      	add	r1, sp, #20
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	f000 fb79 	bl	80011ac <__gnu_unwind_execute>
 8000aba:	b918      	cbnz	r0, 8000ac4 <__gnu_unwind_pr_common+0x54>
 8000abc:	2008      	movs	r0, #8
 8000abe:	b009      	add	sp, #36	; 0x24
 8000ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac4:	2009      	movs	r0, #9
 8000ac6:	b009      	add	sp, #36	; 0x24
 8000ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000acc:	f8d4 a000 	ldr.w	sl, [r4]
 8000ad0:	f1ba 0f00 	cmp.w	sl, #0
 8000ad4:	d0ed      	beq.n	8000ab2 <__gnu_unwind_pr_common+0x42>
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	f000 0308 	and.w	r3, r0, #8
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	2e02      	cmp	r6, #2
 8000ae0:	d04a      	beq.n	8000b78 <__gnu_unwind_pr_common+0x108>
 8000ae2:	f8b4 a000 	ldrh.w	sl, [r4]
 8000ae6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000aea:	3404      	adds	r4, #4
 8000aec:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000aee:	f029 0b01 	bic.w	fp, r9, #1
 8000af2:	210f      	movs	r1, #15
 8000af4:	4638      	mov	r0, r7
 8000af6:	449b      	add	fp, r3
 8000af8:	f7ff ff46 	bl	8000988 <_Unwind_GetGR>
 8000afc:	4583      	cmp	fp, r0
 8000afe:	d839      	bhi.n	8000b74 <__gnu_unwind_pr_common+0x104>
 8000b00:	f02a 0301 	bic.w	r3, sl, #1
 8000b04:	449b      	add	fp, r3
 8000b06:	4583      	cmp	fp, r0
 8000b08:	bf94      	ite	ls
 8000b0a:	2000      	movls	r0, #0
 8000b0c:	2001      	movhi	r0, #1
 8000b0e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	f00a 0a01 	and.w	sl, sl, #1
 8000b1a:	ea43 030a 	orr.w	r3, r3, sl
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d049      	beq.n	8000bb6 <__gnu_unwind_pr_common+0x146>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d032      	beq.n	8000b8c <__gnu_unwind_pr_common+0x11c>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1cc      	bne.n	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000b2a:	f1b8 0f00 	cmp.w	r8, #0
 8000b2e:	d002      	beq.n	8000b36 <__gnu_unwind_pr_common+0xc6>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	f040 80cd 	bne.w	8000cd0 <__gnu_unwind_pr_common+0x260>
 8000b36:	3404      	adds	r4, #4
 8000b38:	f8d4 a000 	ldr.w	sl, [r4]
 8000b3c:	f1ba 0f00 	cmp.w	sl, #0
 8000b40:	d1cd      	bne.n	8000ade <__gnu_unwind_pr_common+0x6e>
 8000b42:	a905      	add	r1, sp, #20
 8000b44:	4638      	mov	r0, r7
 8000b46:	f000 fb31 	bl	80011ac <__gnu_unwind_execute>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d1ba      	bne.n	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000b4e:	9b01      	ldr	r3, [sp, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0b3      	beq.n	8000abc <__gnu_unwind_pr_common+0x4c>
 8000b54:	210f      	movs	r1, #15
 8000b56:	4638      	mov	r0, r7
 8000b58:	f7ff ff16 	bl	8000988 <_Unwind_GetGR>
 8000b5c:	210e      	movs	r1, #14
 8000b5e:	4602      	mov	r2, r0
 8000b60:	4638      	mov	r0, r7
 8000b62:	f7ff ff37 	bl	80009d4 <_Unwind_SetGR>
 8000b66:	4638      	mov	r0, r7
 8000b68:	4a6a      	ldr	r2, [pc, #424]	; (8000d14 <__gnu_unwind_pr_common+0x2a4>)
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f7ff ff32 	bl	80009d4 <_Unwind_SetGR>
 8000b70:	2007      	movs	r0, #7
 8000b72:	e7a8      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7ca      	b.n	8000b0e <__gnu_unwind_pr_common+0x9e>
 8000b78:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000b7c:	3408      	adds	r4, #8
 8000b7e:	e7b5      	b.n	8000aec <__gnu_unwind_pr_common+0x7c>
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	9305      	str	r3, [sp, #20]
 8000b84:	2303      	movs	r3, #3
 8000b86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000b8a:	e78a      	b.n	8000aa2 <__gnu_unwind_pr_common+0x32>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000b92:	f1b8 0f00 	cmp.w	r8, #0
 8000b96:	d145      	bne.n	8000c24 <__gnu_unwind_pr_common+0x1b4>
 8000b98:	b128      	cbz	r0, 8000ba6 <__gnu_unwind_pr_common+0x136>
 8000b9a:	9a02      	ldr	r2, [sp, #8]
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	d05c      	beq.n	8000c5a <__gnu_unwind_pr_common+0x1ea>
 8000ba0:	f1bb 0f00 	cmp.w	fp, #0
 8000ba4:	d074      	beq.n	8000c90 <__gnu_unwind_pr_common+0x220>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da00      	bge.n	8000bac <__gnu_unwind_pr_common+0x13c>
 8000baa:	3404      	adds	r4, #4
 8000bac:	f10b 0b01 	add.w	fp, fp, #1
 8000bb0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000bb4:	e7c0      	b.n	8000b38 <__gnu_unwind_pr_common+0xc8>
 8000bb6:	f1b8 0f00 	cmp.w	r8, #0
 8000bba:	d119      	bne.n	8000bf0 <__gnu_unwind_pr_common+0x180>
 8000bbc:	b1b0      	cbz	r0, 8000bec <__gnu_unwind_pr_common+0x17c>
 8000bbe:	6863      	ldr	r3, [r4, #4]
 8000bc0:	6822      	ldr	r2, [r4, #0]
 8000bc2:	1c99      	adds	r1, r3, #2
 8000bc4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bc8:	f43f af7c 	beq.w	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000bcc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	9104      	str	r1, [sp, #16]
 8000bd4:	f000 8090 	beq.w	8000cf8 <__gnu_unwind_pr_common+0x288>
 8000bd8:	1d20      	adds	r0, r4, #4
 8000bda:	f7ff fdc1 	bl	8000760 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000bde:	ab04      	add	r3, sp, #16
 8000be0:	4601      	mov	r1, r0
 8000be2:	4628      	mov	r0, r5
 8000be4:	f3af 8000 	nop.w
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d15b      	bne.n	8000ca4 <__gnu_unwind_pr_common+0x234>
 8000bec:	3408      	adds	r4, #8
 8000bee:	e7a3      	b.n	8000b38 <__gnu_unwind_pr_common+0xc8>
 8000bf0:	210d      	movs	r1, #13
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000bf8:	f7ff fec6 	bl	8000988 <_Unwind_GetGR>
 8000bfc:	4581      	cmp	r9, r0
 8000bfe:	d1f5      	bne.n	8000bec <__gnu_unwind_pr_common+0x17c>
 8000c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d1f2      	bne.n	8000bec <__gnu_unwind_pr_common+0x17c>
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fce2 	bl	80005d0 <selfrel_offset31>
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4638      	mov	r0, r7
 8000c12:	f7ff fedf 	bl	80009d4 <_Unwind_SetGR>
 8000c16:	4638      	mov	r0, r7
 8000c18:	462a      	mov	r2, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f7ff feda 	bl	80009d4 <_Unwind_SetGR>
 8000c20:	2007      	movs	r0, #7
 8000c22:	e750      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000c24:	210d      	movs	r1, #13
 8000c26:	4638      	mov	r0, r7
 8000c28:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000c2c:	f7ff feac 	bl	8000988 <_Unwind_GetGR>
 8000c30:	4581      	cmp	r9, r0
 8000c32:	d001      	beq.n	8000c38 <__gnu_unwind_pr_common+0x1c8>
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	e7b6      	b.n	8000ba6 <__gnu_unwind_pr_common+0x136>
 8000c38:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	d1fa      	bne.n	8000c34 <__gnu_unwind_pr_common+0x1c4>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000c46:	18e3      	adds	r3, r4, r3
 8000c48:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000c4c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db59      	blt.n	8000d08 <__gnu_unwind_pr_common+0x298>
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	e7a8      	b.n	8000bac <__gnu_unwind_pr_common+0x13c>
 8000c5a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c62:	f104 0a04 	add.w	sl, r4, #4
 8000c66:	46b0      	mov	r8, r6
 8000c68:	4691      	mov	r9, r2
 8000c6a:	461e      	mov	r6, r3
 8000c6c:	e00e      	b.n	8000c8c <__gnu_unwind_pr_common+0x21c>
 8000c6e:	4650      	mov	r0, sl
 8000c70:	9604      	str	r6, [sp, #16]
 8000c72:	f7ff fd75 	bl	8000760 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c76:	2200      	movs	r2, #0
 8000c78:	4601      	mov	r1, r0
 8000c7a:	ab04      	add	r3, sp, #16
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f109 0901 	add.w	r9, r9, #1
 8000c82:	f10a 0a04 	add.w	sl, sl, #4
 8000c86:	f3af 8000 	nop.w
 8000c8a:	b9e0      	cbnz	r0, 8000cc6 <__gnu_unwind_pr_common+0x256>
 8000c8c:	45d9      	cmp	r9, fp
 8000c8e:	d1ee      	bne.n	8000c6e <__gnu_unwind_pr_common+0x1fe>
 8000c90:	210d      	movs	r1, #13
 8000c92:	4638      	mov	r0, r7
 8000c94:	f7ff fe78 	bl	8000988 <_Unwind_GetGR>
 8000c98:	9b04      	ldr	r3, [sp, #16]
 8000c9a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c9c:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	e710      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000ca4:	4681      	mov	r9, r0
 8000ca6:	210d      	movs	r1, #13
 8000ca8:	4638      	mov	r0, r7
 8000caa:	f7ff fe6d 	bl	8000988 <_Unwind_GetGR>
 8000cae:	f1b9 0f02 	cmp.w	r9, #2
 8000cb2:	6228      	str	r0, [r5, #32]
 8000cb4:	d125      	bne.n	8000d02 <__gnu_unwind_pr_common+0x292>
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	9a04      	ldr	r2, [sp, #16]
 8000cba:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000cbe:	626b      	str	r3, [r5, #36]	; 0x24
 8000cc0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	e6ff      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000cc6:	4646      	mov	r6, r8
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000cce:	e76a      	b.n	8000ba6 <__gnu_unwind_pr_common+0x136>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff fc7d 	bl	80005d0 <selfrel_offset31>
 8000cd6:	3404      	adds	r4, #4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cdc:	4628      	mov	r0, r5
 8000cde:	4614      	mov	r4, r2
 8000ce0:	f3af 8000 	nop.w
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	f43f aeed 	beq.w	8000ac4 <__gnu_unwind_pr_common+0x54>
 8000cea:	4638      	mov	r0, r7
 8000cec:	4622      	mov	r2, r4
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f7ff fe70 	bl	80009d4 <_Unwind_SetGR>
 8000cf4:	2007      	movs	r0, #7
 8000cf6:	e6e6      	b.n	8000ac6 <__gnu_unwind_pr_common+0x56>
 8000cf8:	210d      	movs	r1, #13
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	f7ff fe44 	bl	8000988 <_Unwind_GetGR>
 8000d00:	6228      	str	r0, [r5, #32]
 8000d02:	9b04      	ldr	r3, [sp, #16]
 8000d04:	626b      	str	r3, [r5, #36]	; 0x24
 8000d06:	e7db      	b.n	8000cc0 <__gnu_unwind_pr_common+0x250>
 8000d08:	f10b 0001 	add.w	r0, fp, #1
 8000d0c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d10:	e77a      	b.n	8000c08 <__gnu_unwind_pr_common+0x198>
 8000d12:	bf00      	nop
 8000d14:	00000000 	.word	0x00000000

08000d18 <__aeabi_unwind_cpp_pr0>:
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e6a9      	b.n	8000a70 <__gnu_unwind_pr_common>

08000d1c <__aeabi_unwind_cpp_pr1>:
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e6a7      	b.n	8000a70 <__gnu_unwind_pr_common>

08000d20 <__aeabi_unwind_cpp_pr2>:
 8000d20:	2302      	movs	r3, #2
 8000d22:	e6a5      	b.n	8000a70 <__gnu_unwind_pr_common>

08000d24 <_Unwind_VRS_Pop>:
 8000d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d28:	4606      	mov	r6, r0
 8000d2a:	b0c3      	sub	sp, #268	; 0x10c
 8000d2c:	4615      	mov	r5, r2
 8000d2e:	461c      	mov	r4, r3
 8000d30:	2904      	cmp	r1, #4
 8000d32:	f200 80bf 	bhi.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d36:	e8df f001 	tbb	[pc, r1]
 8000d3a:	579e      	.short	0x579e
 8000d3c:	2dbd      	.short	0x2dbd
 8000d3e:	03          	.byte	0x03
 8000d3f:	00          	.byte	0x00
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	f040 80b7 	bne.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d46:	2a10      	cmp	r2, #16
 8000d48:	f200 80b4 	bhi.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d4c:	6803      	ldr	r3, [r0, #0]
 8000d4e:	06d8      	lsls	r0, r3, #27
 8000d50:	f100 80f9 	bmi.w	8000f46 <_Unwind_VRS_Pop+0x222>
 8000d54:	af20      	add	r7, sp, #128	; 0x80
 8000d56:	4638      	mov	r0, r7
 8000d58:	f000 f998 	bl	800108c <__gnu_Unwind_Save_WMMXC>
 8000d5c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8000d5e:	4639      	mov	r1, r7
 8000d60:	2300      	movs	r3, #0
 8000d62:	f04f 0c01 	mov.w	ip, #1
 8000d66:	fa0c f203 	lsl.w	r2, ip, r3
 8000d6a:	422a      	tst	r2, r5
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f103 0301 	add.w	r3, r3, #1
 8000d72:	d003      	beq.n	8000d7c <_Unwind_VRS_Pop+0x58>
 8000d74:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d78:	600a      	str	r2, [r1, #0]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	f101 0104 	add.w	r1, r1, #4
 8000d82:	d1f0      	bne.n	8000d66 <_Unwind_VRS_Pop+0x42>
 8000d84:	4638      	mov	r0, r7
 8000d86:	63b4      	str	r4, [r6, #56]	; 0x38
 8000d88:	f000 f976 	bl	8001078 <__gnu_Unwind_Restore_WMMXC>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	b043      	add	sp, #268	; 0x10c
 8000d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d94:	2c03      	cmp	r4, #3
 8000d96:	f040 808d 	bne.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000d9a:	b294      	uxth	r4, r2
 8000d9c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000da6:	f200 8085 	bhi.w	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000daa:	6803      	ldr	r3, [r0, #0]
 8000dac:	071f      	lsls	r7, r3, #28
 8000dae:	f100 80d2 	bmi.w	8000f56 <_Unwind_VRS_Pop+0x232>
 8000db2:	af20      	add	r7, sp, #128	; 0x80
 8000db4:	4638      	mov	r0, r7
 8000db6:	f000 f93d 	bl	8001034 <__gnu_Unwind_Save_WMMXD>
 8000dba:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000dbc:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000dc0:	b154      	cbz	r4, 8000dd8 <_Unwind_VRS_Pop+0xb4>
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	1ad0      	subs	r0, r2, r3
 8000dc6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000dca:	00e4      	lsls	r4, r4, #3
 8000dcc:	581d      	ldr	r5, [r3, r0]
 8000dce:	f843 5b04 	str.w	r5, [r3], #4
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d1fa      	bne.n	8000dcc <_Unwind_VRS_Pop+0xa8>
 8000dd6:	4422      	add	r2, r4
 8000dd8:	4638      	mov	r0, r7
 8000dda:	63b2      	str	r2, [r6, #56]	; 0x38
 8000ddc:	f000 f908 	bl	8000ff0 <__gnu_Unwind_Restore_WMMXD>
 8000de0:	2000      	movs	r0, #0
 8000de2:	b043      	add	sp, #268	; 0x10c
 8000de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000de8:	2c01      	cmp	r4, #1
 8000dea:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000dee:	b295      	uxth	r5, r2
 8000df0:	d05c      	beq.n	8000eac <_Unwind_VRS_Pop+0x188>
 8000df2:	2c05      	cmp	r4, #5
 8000df4:	d15e      	bne.n	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000df6:	eb08 0905 	add.w	r9, r8, r5
 8000dfa:	f1b9 0f20 	cmp.w	r9, #32
 8000dfe:	d859      	bhi.n	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000e00:	f1b8 0f0f 	cmp.w	r8, #15
 8000e04:	d979      	bls.n	8000efa <_Unwind_VRS_Pop+0x1d6>
 8000e06:	46a9      	mov	r9, r5
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	f040 808a 	bne.w	8000f22 <_Unwind_VRS_Pop+0x1fe>
 8000e0e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e10:	b36d      	cbz	r5, 8000e6e <_Unwind_VRS_Pop+0x14a>
 8000e12:	af20      	add	r7, sp, #128	; 0x80
 8000e14:	f04f 0900 	mov.w	r9, #0
 8000e18:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000e1c:	3f04      	subs	r7, #4
 8000e1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8000e26:	f847 1f04 	str.w	r1, [r7, #4]!
 8000e2a:	42ab      	cmp	r3, r5
 8000e2c:	d1f9      	bne.n	8000e22 <_Unwind_VRS_Pop+0xfe>
 8000e2e:	f1b9 0f00 	cmp.w	r9, #0
 8000e32:	d00f      	beq.n	8000e54 <_Unwind_VRS_Pop+0x130>
 8000e34:	466f      	mov	r7, sp
 8000e36:	4641      	mov	r1, r8
 8000e38:	2910      	cmp	r1, #16
 8000e3a:	bf38      	it	cc
 8000e3c:	2110      	movcc	r1, #16
 8000e3e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e42:	3984      	subs	r1, #132	; 0x84
 8000e44:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000e48:	f853 0b04 	ldr.w	r0, [r3], #4
 8000e4c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	d1f9      	bne.n	8000e48 <_Unwind_VRS_Pop+0x124>
 8000e54:	2c01      	cmp	r4, #1
 8000e56:	f000 8086 	beq.w	8000f66 <_Unwind_VRS_Pop+0x242>
 8000e5a:	f1b8 0f0f 	cmp.w	r8, #15
 8000e5e:	63b5      	str	r5, [r6, #56]	; 0x38
 8000e60:	d947      	bls.n	8000ef2 <_Unwind_VRS_Pop+0x1ce>
 8000e62:	f1b9 0f00 	cmp.w	r9, #0
 8000e66:	d002      	beq.n	8000e6e <_Unwind_VRS_Pop+0x14a>
 8000e68:	4668      	mov	r0, sp
 8000e6a:	f000 f8b9 	bl	8000fe0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e6e:	2000      	movs	r0, #0
 8000e70:	b043      	add	sp, #268	; 0x10c
 8000e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e76:	b9ec      	cbnz	r4, 8000eb4 <_Unwind_VRS_Pop+0x190>
 8000e78:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	fa1f fc82 	uxth.w	ip, r2
 8000e80:	2401      	movs	r4, #1
 8000e82:	1d37      	adds	r7, r6, #4
 8000e84:	fa04 f203 	lsl.w	r2, r4, r3
 8000e88:	ea12 0f0c 	tst.w	r2, ip
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	d004      	beq.n	8000e9a <_Unwind_VRS_Pop+0x176>
 8000e90:	f851 2b04 	ldr.w	r2, [r1], #4
 8000e94:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000e98:	4608      	mov	r0, r1
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d1f1      	bne.n	8000e84 <_Unwind_VRS_Pop+0x160>
 8000ea0:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8000ea4:	d1e3      	bne.n	8000e6e <_Unwind_VRS_Pop+0x14a>
 8000ea6:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	e004      	b.n	8000eb6 <_Unwind_VRS_Pop+0x192>
 8000eac:	eb08 0305 	add.w	r3, r8, r5
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d903      	bls.n	8000ebc <_Unwind_VRS_Pop+0x198>
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	b043      	add	sp, #268	; 0x10c
 8000eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ebc:	f1b8 0f0f 	cmp.w	r8, #15
 8000ec0:	d8f8      	bhi.n	8000eb4 <_Unwind_VRS_Pop+0x190>
 8000ec2:	6833      	ldr	r3, [r6, #0]
 8000ec4:	07da      	lsls	r2, r3, #31
 8000ec6:	d506      	bpl.n	8000ed6 <_Unwind_VRS_Pop+0x1b2>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	f840 3b48 	str.w	r3, [r0], #72
 8000ed2:	f000 f879 	bl	8000fc8 <__gnu_Unwind_Save_VFP>
 8000ed6:	af20      	add	r7, sp, #128	; 0x80
 8000ed8:	4638      	mov	r0, r7
 8000eda:	f000 f875 	bl	8000fc8 <__gnu_Unwind_Save_VFP>
 8000ede:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ee0:	2d00      	cmp	r5, #0
 8000ee2:	d197      	bne.n	8000e14 <_Unwind_VRS_Pop+0xf0>
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	3504      	adds	r5, #4
 8000ee8:	63b5      	str	r5, [r6, #56]	; 0x38
 8000eea:	4638      	mov	r0, r7
 8000eec:	f000 f868 	bl	8000fc0 <__gnu_Unwind_Restore_VFP>
 8000ef0:	e7bd      	b.n	8000e6e <_Unwind_VRS_Pop+0x14a>
 8000ef2:	a820      	add	r0, sp, #128	; 0x80
 8000ef4:	f000 f86c 	bl	8000fd0 <__gnu_Unwind_Restore_VFP_D>
 8000ef8:	e7b3      	b.n	8000e62 <_Unwind_VRS_Pop+0x13e>
 8000efa:	f1b9 0f10 	cmp.w	r9, #16
 8000efe:	d940      	bls.n	8000f82 <_Unwind_VRS_Pop+0x25e>
 8000f00:	f1a9 0910 	sub.w	r9, r9, #16
 8000f04:	6833      	ldr	r3, [r6, #0]
 8000f06:	07d9      	lsls	r1, r3, #31
 8000f08:	d508      	bpl.n	8000f1c <_Unwind_VRS_Pop+0x1f8>
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	f840 3b48 	str.w	r3, [r0], #72
 8000f18:	f000 f85e 	bl	8000fd8 <__gnu_Unwind_Save_VFP_D>
 8000f1c:	f1b9 0f00 	cmp.w	r9, #0
 8000f20:	d032      	beq.n	8000f88 <_Unwind_VRS_Pop+0x264>
 8000f22:	6833      	ldr	r3, [r6, #0]
 8000f24:	075a      	lsls	r2, r3, #29
 8000f26:	d420      	bmi.n	8000f6a <_Unwind_VRS_Pop+0x246>
 8000f28:	f1b8 0f0f 	cmp.w	r8, #15
 8000f2c:	d925      	bls.n	8000f7a <_Unwind_VRS_Pop+0x256>
 8000f2e:	466f      	mov	r7, sp
 8000f30:	4638      	mov	r0, r7
 8000f32:	f1c8 0510 	rsb	r5, r8, #16
 8000f36:	f000 f857 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000f3e:	f77f af7a 	ble.w	8000e36 <_Unwind_VRS_Pop+0x112>
 8000f42:	af20      	add	r7, sp, #128	; 0x80
 8000f44:	e768      	b.n	8000e18 <_Unwind_VRS_Pop+0xf4>
 8000f46:	f023 0310 	bic.w	r3, r3, #16
 8000f4a:	6033      	str	r3, [r6, #0]
 8000f4c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000f50:	f000 f89c 	bl	800108c <__gnu_Unwind_Save_WMMXC>
 8000f54:	e6fe      	b.n	8000d54 <_Unwind_VRS_Pop+0x30>
 8000f56:	f023 0308 	bic.w	r3, r3, #8
 8000f5a:	6003      	str	r3, [r0, #0]
 8000f5c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000f60:	f000 f868 	bl	8001034 <__gnu_Unwind_Save_WMMXD>
 8000f64:	e725      	b.n	8000db2 <_Unwind_VRS_Pop+0x8e>
 8000f66:	af20      	add	r7, sp, #128	; 0x80
 8000f68:	e7bd      	b.n	8000ee6 <_Unwind_VRS_Pop+0x1c2>
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	f840 3bd0 	str.w	r3, [r0], #208
 8000f74:	f000 f838 	bl	8000fe8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f78:	e7d6      	b.n	8000f28 <_Unwind_VRS_Pop+0x204>
 8000f7a:	a820      	add	r0, sp, #128	; 0x80
 8000f7c:	f000 f82c 	bl	8000fd8 <__gnu_Unwind_Save_VFP_D>
 8000f80:	e7d5      	b.n	8000f2e <_Unwind_VRS_Pop+0x20a>
 8000f82:	f04f 0900 	mov.w	r9, #0
 8000f86:	e7bd      	b.n	8000f04 <_Unwind_VRS_Pop+0x1e0>
 8000f88:	f1b8 0f0f 	cmp.w	r8, #15
 8000f8c:	f63f af3f 	bhi.w	8000e0e <_Unwind_VRS_Pop+0xea>
 8000f90:	af20      	add	r7, sp, #128	; 0x80
 8000f92:	4638      	mov	r0, r7
 8000f94:	f000 f820 	bl	8000fd8 <__gnu_Unwind_Save_VFP_D>
 8000f98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	f47f af3a 	bne.w	8000e14 <_Unwind_VRS_Pop+0xf0>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	f000 f815 	bl	8000fd0 <__gnu_Unwind_Restore_VFP_D>
 8000fa6:	e762      	b.n	8000e6e <_Unwind_VRS_Pop+0x14a>

08000fa8 <__restore_core_regs>:
 8000fa8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000fac:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	46a6      	mov	lr, r4
 8000fb4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fb8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fbc:	46e5      	mov	sp, ip
 8000fbe:	bd00      	pop	{pc}

08000fc0 <__gnu_Unwind_Restore_VFP>:
 8000fc0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Save_VFP>:
 8000fc8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Restore_VFP_D>:
 8000fd0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Save_VFP_D>:
 8000fd8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000fe0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000fe8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_Restore_WMMXD>:
 8000ff0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ff4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ff8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000ffc:	ecf0 3102 	ldfe	f3, [r0], #8
 8001000:	ecf0 4102 	ldfe	f4, [r0], #8
 8001004:	ecf0 5102 	ldfe	f5, [r0], #8
 8001008:	ecf0 6102 	ldfe	f6, [r0], #8
 800100c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001010:	ecf0 8102 	ldfp	f0, [r0], #8
 8001014:	ecf0 9102 	ldfp	f1, [r0], #8
 8001018:	ecf0 a102 	ldfp	f2, [r0], #8
 800101c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001020:	ecf0 c102 	ldfp	f4, [r0], #8
 8001024:	ecf0 d102 	ldfp	f5, [r0], #8
 8001028:	ecf0 e102 	ldfp	f6, [r0], #8
 800102c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__gnu_Unwind_Save_WMMXD>:
 8001034:	ece0 0102 	stfe	f0, [r0], #8
 8001038:	ece0 1102 	stfe	f1, [r0], #8
 800103c:	ece0 2102 	stfe	f2, [r0], #8
 8001040:	ece0 3102 	stfe	f3, [r0], #8
 8001044:	ece0 4102 	stfe	f4, [r0], #8
 8001048:	ece0 5102 	stfe	f5, [r0], #8
 800104c:	ece0 6102 	stfe	f6, [r0], #8
 8001050:	ece0 7102 	stfe	f7, [r0], #8
 8001054:	ece0 8102 	stfp	f0, [r0], #8
 8001058:	ece0 9102 	stfp	f1, [r0], #8
 800105c:	ece0 a102 	stfp	f2, [r0], #8
 8001060:	ece0 b102 	stfp	f3, [r0], #8
 8001064:	ece0 c102 	stfp	f4, [r0], #8
 8001068:	ece0 d102 	stfp	f5, [r0], #8
 800106c:	ece0 e102 	stfp	f6, [r0], #8
 8001070:	ece0 f102 	stfp	f7, [r0], #8
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__gnu_Unwind_Restore_WMMXC>:
 8001078:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800107c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001080:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001084:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__gnu_Unwind_Save_WMMXC>:
 800108c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001090:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001094:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001098:	fca0 b101 	stc2	1, cr11, [r0], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <_Unwind_RaiseException>:
 80010a0:	46ec      	mov	ip, sp
 80010a2:	b500      	push	{lr}
 80010a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010b4:	a901      	add	r1, sp, #4
 80010b6:	f7ff fbe1 	bl	800087c <__gnu_Unwind_RaiseException>
 80010ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010be:	b012      	add	sp, #72	; 0x48
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <_Unwind_Resume>:
 80010c4:	46ec      	mov	ip, sp
 80010c6:	b500      	push	{lr}
 80010c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d8:	a901      	add	r1, sp, #4
 80010da:	f7ff fc0b 	bl	80008f4 <__gnu_Unwind_Resume>
 80010de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010e2:	b012      	add	sp, #72	; 0x48
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <_Unwind_Resume_or_Rethrow>:
 80010e8:	46ec      	mov	ip, sp
 80010ea:	b500      	push	{lr}
 80010ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010fc:	a901      	add	r1, sp, #4
 80010fe:	f7ff fc1b 	bl	8000938 <__gnu_Unwind_Resume_or_Rethrow>
 8001102:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001106:	b012      	add	sp, #72	; 0x48
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <_Unwind_ForcedUnwind>:
 800110c:	46ec      	mov	ip, sp
 800110e:	b500      	push	{lr}
 8001110:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001114:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001120:	ab01      	add	r3, sp, #4
 8001122:	f7ff fbdf 	bl	80008e4 <__gnu_Unwind_ForcedUnwind>
 8001126:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800112a:	b012      	add	sp, #72	; 0x48
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_Backtrace>:
 8001130:	46ec      	mov	ip, sp
 8001132:	b500      	push	{lr}
 8001134:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001138:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001144:	aa01      	add	r2, sp, #4
 8001146:	f7ff fc51 	bl	80009ec <__gnu_Unwind_Backtrace>
 800114a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800114e:	b012      	add	sp, #72	; 0x48
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <next_unwind_byte>:
 8001154:	7a02      	ldrb	r2, [r0, #8]
 8001156:	4603      	mov	r3, r0
 8001158:	b97a      	cbnz	r2, 800117a <next_unwind_byte+0x26>
 800115a:	7a42      	ldrb	r2, [r0, #9]
 800115c:	b1a2      	cbz	r2, 8001188 <next_unwind_byte+0x34>
 800115e:	6841      	ldr	r1, [r0, #4]
 8001160:	3a01      	subs	r2, #1
 8001162:	b410      	push	{r4}
 8001164:	7242      	strb	r2, [r0, #9]
 8001166:	6808      	ldr	r0, [r1, #0]
 8001168:	2203      	movs	r2, #3
 800116a:	1d0c      	adds	r4, r1, #4
 800116c:	721a      	strb	r2, [r3, #8]
 800116e:	0202      	lsls	r2, r0, #8
 8001170:	605c      	str	r4, [r3, #4]
 8001172:	0e00      	lsrs	r0, r0, #24
 8001174:	bc10      	pop	{r4}
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	4770      	bx	lr
 800117a:	6800      	ldr	r0, [r0, #0]
 800117c:	3a01      	subs	r2, #1
 800117e:	721a      	strb	r2, [r3, #8]
 8001180:	0202      	lsls	r2, r0, #8
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	0e00      	lsrs	r0, r0, #24
 8001186:	4770      	bx	lr
 8001188:	20b0      	movs	r0, #176	; 0xb0
 800118a:	4770      	bx	lr

0800118c <_Unwind_GetGR.constprop.0>:
 800118c:	b500      	push	{lr}
 800118e:	b085      	sub	sp, #20
 8001190:	2300      	movs	r3, #0
 8001192:	aa03      	add	r2, sp, #12
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	220c      	movs	r2, #12
 800119a:	f7ff fbdd 	bl	8000958 <_Unwind_VRS_Get>
 800119e:	9803      	ldr	r0, [sp, #12]
 80011a0:	b005      	add	sp, #20
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a6:	bf00      	nop

080011a8 <unwind_UCB_from_context>:
 80011a8:	e7f0      	b.n	800118c <_Unwind_GetGR.constprop.0>
 80011aa:	bf00      	nop

080011ac <__gnu_unwind_execute>:
 80011ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b0:	4605      	mov	r5, r0
 80011b2:	b085      	sub	sp, #20
 80011b4:	460e      	mov	r6, r1
 80011b6:	f04f 0800 	mov.w	r8, #0
 80011ba:	4630      	mov	r0, r6
 80011bc:	f7ff ffca 	bl	8001154 <next_unwind_byte>
 80011c0:	28b0      	cmp	r0, #176	; 0xb0
 80011c2:	4604      	mov	r4, r0
 80011c4:	f000 80ba 	beq.w	800133c <__gnu_unwind_execute+0x190>
 80011c8:	0607      	lsls	r7, r0, #24
 80011ca:	d520      	bpl.n	800120e <__gnu_unwind_execute+0x62>
 80011cc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011d0:	2b80      	cmp	r3, #128	; 0x80
 80011d2:	d04d      	beq.n	8001270 <__gnu_unwind_execute+0xc4>
 80011d4:	2b90      	cmp	r3, #144	; 0x90
 80011d6:	d036      	beq.n	8001246 <__gnu_unwind_execute+0x9a>
 80011d8:	2ba0      	cmp	r3, #160	; 0xa0
 80011da:	d060      	beq.n	800129e <__gnu_unwind_execute+0xf2>
 80011dc:	2bb0      	cmp	r3, #176	; 0xb0
 80011de:	d074      	beq.n	80012ca <__gnu_unwind_execute+0x11e>
 80011e0:	2bc0      	cmp	r3, #192	; 0xc0
 80011e2:	f000 808b 	beq.w	80012fc <__gnu_unwind_execute+0x150>
 80011e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011ea:	2bd0      	cmp	r3, #208	; 0xd0
 80011ec:	d10b      	bne.n	8001206 <__gnu_unwind_execute+0x5a>
 80011ee:	f000 0207 	and.w	r2, r0, #7
 80011f2:	3201      	adds	r2, #1
 80011f4:	2305      	movs	r3, #5
 80011f6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011fa:	2101      	movs	r1, #1
 80011fc:	4628      	mov	r0, r5
 80011fe:	f7ff fd91 	bl	8000d24 <_Unwind_VRS_Pop>
 8001202:	2800      	cmp	r0, #0
 8001204:	d0d9      	beq.n	80011ba <__gnu_unwind_execute+0xe>
 8001206:	2009      	movs	r0, #9
 8001208:	b005      	add	sp, #20
 800120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120e:	0083      	lsls	r3, r0, #2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	1d1f      	adds	r7, r3, #4
 8001214:	f10d 090c 	add.w	r9, sp, #12
 8001218:	2300      	movs	r3, #0
 800121a:	4619      	mov	r1, r3
 800121c:	f8cd 9000 	str.w	r9, [sp]
 8001220:	220d      	movs	r2, #13
 8001222:	4628      	mov	r0, r5
 8001224:	f7ff fb98 	bl	8000958 <_Unwind_VRS_Get>
 8001228:	9b03      	ldr	r3, [sp, #12]
 800122a:	f8cd 9000 	str.w	r9, [sp]
 800122e:	0660      	lsls	r0, r4, #25
 8001230:	bf4c      	ite	mi
 8001232:	1bdf      	submi	r7, r3, r7
 8001234:	18ff      	addpl	r7, r7, r3
 8001236:	2300      	movs	r3, #0
 8001238:	220d      	movs	r2, #13
 800123a:	4619      	mov	r1, r3
 800123c:	4628      	mov	r0, r5
 800123e:	9703      	str	r7, [sp, #12]
 8001240:	f7ff fbb0 	bl	80009a4 <_Unwind_VRS_Set>
 8001244:	e7b9      	b.n	80011ba <__gnu_unwind_execute+0xe>
 8001246:	f000 030d 	and.w	r3, r0, #13
 800124a:	2b0d      	cmp	r3, #13
 800124c:	d0db      	beq.n	8001206 <__gnu_unwind_execute+0x5a>
 800124e:	af03      	add	r7, sp, #12
 8001250:	2300      	movs	r3, #0
 8001252:	f000 020f 	and.w	r2, r0, #15
 8001256:	4619      	mov	r1, r3
 8001258:	9700      	str	r7, [sp, #0]
 800125a:	4628      	mov	r0, r5
 800125c:	f7ff fb7c 	bl	8000958 <_Unwind_VRS_Get>
 8001260:	2300      	movs	r3, #0
 8001262:	9700      	str	r7, [sp, #0]
 8001264:	220d      	movs	r2, #13
 8001266:	4619      	mov	r1, r3
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fb9b 	bl	80009a4 <_Unwind_VRS_Set>
 800126e:	e7a4      	b.n	80011ba <__gnu_unwind_execute+0xe>
 8001270:	4630      	mov	r0, r6
 8001272:	f7ff ff6f 	bl	8001154 <next_unwind_byte>
 8001276:	0224      	lsls	r4, r4, #8
 8001278:	4320      	orrs	r0, r4
 800127a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800127e:	d0c2      	beq.n	8001206 <__gnu_unwind_execute+0x5a>
 8001280:	0104      	lsls	r4, r0, #4
 8001282:	2300      	movs	r3, #0
 8001284:	b2a2      	uxth	r2, r4
 8001286:	4619      	mov	r1, r3
 8001288:	4628      	mov	r0, r5
 800128a:	f7ff fd4b 	bl	8000d24 <_Unwind_VRS_Pop>
 800128e:	2800      	cmp	r0, #0
 8001290:	d1b9      	bne.n	8001206 <__gnu_unwind_execute+0x5a>
 8001292:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001296:	bf18      	it	ne
 8001298:	f04f 0801 	movne.w	r8, #1
 800129c:	e78d      	b.n	80011ba <__gnu_unwind_execute+0xe>
 800129e:	43c2      	mvns	r2, r0
 80012a0:	f002 0307 	and.w	r3, r2, #7
 80012a4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80012a8:	411a      	asrs	r2, r3
 80012aa:	0701      	lsls	r1, r0, #28
 80012ac:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	bf48      	it	mi
 80012b6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80012ba:	4619      	mov	r1, r3
 80012bc:	4628      	mov	r0, r5
 80012be:	f7ff fd31 	bl	8000d24 <_Unwind_VRS_Pop>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f43f af79 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 80012c8:	e79d      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 80012ca:	28b1      	cmp	r0, #177	; 0xb1
 80012cc:	d03b      	beq.n	8001346 <__gnu_unwind_execute+0x19a>
 80012ce:	28b2      	cmp	r0, #178	; 0xb2
 80012d0:	f000 8093 	beq.w	80013fa <__gnu_unwind_execute+0x24e>
 80012d4:	28b3      	cmp	r0, #179	; 0xb3
 80012d6:	d041      	beq.n	800135c <__gnu_unwind_execute+0x1b0>
 80012d8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80012dc:	2bb4      	cmp	r3, #180	; 0xb4
 80012de:	d092      	beq.n	8001206 <__gnu_unwind_execute+0x5a>
 80012e0:	f000 0207 	and.w	r2, r0, #7
 80012e4:	3201      	adds	r2, #1
 80012e6:	2301      	movs	r3, #1
 80012e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012ec:	4619      	mov	r1, r3
 80012ee:	4628      	mov	r0, r5
 80012f0:	f7ff fd18 	bl	8000d24 <_Unwind_VRS_Pop>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	f43f af60 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 80012fa:	e784      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 80012fc:	28c6      	cmp	r0, #198	; 0xc6
 80012fe:	d04a      	beq.n	8001396 <__gnu_unwind_execute+0x1ea>
 8001300:	28c7      	cmp	r0, #199	; 0xc7
 8001302:	d054      	beq.n	80013ae <__gnu_unwind_execute+0x202>
 8001304:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001308:	2bc0      	cmp	r3, #192	; 0xc0
 800130a:	d063      	beq.n	80013d4 <__gnu_unwind_execute+0x228>
 800130c:	28c8      	cmp	r0, #200	; 0xc8
 800130e:	d068      	beq.n	80013e2 <__gnu_unwind_execute+0x236>
 8001310:	28c9      	cmp	r0, #201	; 0xc9
 8001312:	f47f af78 	bne.w	8001206 <__gnu_unwind_execute+0x5a>
 8001316:	4630      	mov	r0, r6
 8001318:	f7ff ff1c 	bl	8001154 <next_unwind_byte>
 800131c:	0302      	lsls	r2, r0, #12
 800131e:	f000 000f 	and.w	r0, r0, #15
 8001322:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001326:	3001      	adds	r0, #1
 8001328:	4302      	orrs	r2, r0
 800132a:	2101      	movs	r1, #1
 800132c:	2305      	movs	r3, #5
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff fcf8 	bl	8000d24 <_Unwind_VRS_Pop>
 8001334:	2800      	cmp	r0, #0
 8001336:	f43f af40 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 800133a:	e764      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 800133c:	f1b8 0f00 	cmp.w	r8, #0
 8001340:	d018      	beq.n	8001374 <__gnu_unwind_execute+0x1c8>
 8001342:	2000      	movs	r0, #0
 8001344:	e760      	b.n	8001208 <__gnu_unwind_execute+0x5c>
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff ff04 	bl	8001154 <next_unwind_byte>
 800134c:	4602      	mov	r2, r0
 800134e:	2800      	cmp	r0, #0
 8001350:	f43f af59 	beq.w	8001206 <__gnu_unwind_execute+0x5a>
 8001354:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001358:	d0c8      	beq.n	80012ec <__gnu_unwind_execute+0x140>
 800135a:	e754      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 800135c:	4630      	mov	r0, r6
 800135e:	f7ff fef9 	bl	8001154 <next_unwind_byte>
 8001362:	0302      	lsls	r2, r0, #12
 8001364:	f000 030f 	and.w	r3, r0, #15
 8001368:	3301      	adds	r3, #1
 800136a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800136e:	431a      	orrs	r2, r3
 8001370:	2301      	movs	r3, #1
 8001372:	e7bb      	b.n	80012ec <__gnu_unwind_execute+0x140>
 8001374:	ac03      	add	r4, sp, #12
 8001376:	4643      	mov	r3, r8
 8001378:	220e      	movs	r2, #14
 800137a:	4641      	mov	r1, r8
 800137c:	9400      	str	r4, [sp, #0]
 800137e:	4628      	mov	r0, r5
 8001380:	f7ff faea 	bl	8000958 <_Unwind_VRS_Get>
 8001384:	9400      	str	r4, [sp, #0]
 8001386:	4643      	mov	r3, r8
 8001388:	220f      	movs	r2, #15
 800138a:	4641      	mov	r1, r8
 800138c:	4628      	mov	r0, r5
 800138e:	f7ff fb09 	bl	80009a4 <_Unwind_VRS_Set>
 8001392:	4640      	mov	r0, r8
 8001394:	e738      	b.n	8001208 <__gnu_unwind_execute+0x5c>
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff fedc 	bl	8001154 <next_unwind_byte>
 800139c:	0302      	lsls	r2, r0, #12
 800139e:	f000 030f 	and.w	r3, r0, #15
 80013a2:	3301      	adds	r3, #1
 80013a4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80013a8:	431a      	orrs	r2, r3
 80013aa:	2303      	movs	r3, #3
 80013ac:	e79e      	b.n	80012ec <__gnu_unwind_execute+0x140>
 80013ae:	4630      	mov	r0, r6
 80013b0:	f7ff fed0 	bl	8001154 <next_unwind_byte>
 80013b4:	4602      	mov	r2, r0
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f43f af25 	beq.w	8001206 <__gnu_unwind_execute+0x5a>
 80013bc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013c0:	f47f af21 	bne.w	8001206 <__gnu_unwind_execute+0x5a>
 80013c4:	2104      	movs	r1, #4
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7ff fcac 	bl	8000d24 <_Unwind_VRS_Pop>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	f43f aef4 	beq.w	80011ba <__gnu_unwind_execute+0xe>
 80013d2:	e718      	b.n	8001206 <__gnu_unwind_execute+0x5a>
 80013d4:	f000 020f 	and.w	r2, r0, #15
 80013d8:	3201      	adds	r2, #1
 80013da:	2303      	movs	r3, #3
 80013dc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013e0:	e784      	b.n	80012ec <__gnu_unwind_execute+0x140>
 80013e2:	4630      	mov	r0, r6
 80013e4:	f7ff feb6 	bl	8001154 <next_unwind_byte>
 80013e8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013ec:	f000 030f 	and.w	r3, r0, #15
 80013f0:	3210      	adds	r2, #16
 80013f2:	3301      	adds	r3, #1
 80013f4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013f8:	e797      	b.n	800132a <__gnu_unwind_execute+0x17e>
 80013fa:	2300      	movs	r3, #0
 80013fc:	f10d 090c 	add.w	r9, sp, #12
 8001400:	220d      	movs	r2, #13
 8001402:	4619      	mov	r1, r3
 8001404:	f8cd 9000 	str.w	r9, [sp]
 8001408:	4628      	mov	r0, r5
 800140a:	f7ff faa5 	bl	8000958 <_Unwind_VRS_Get>
 800140e:	4630      	mov	r0, r6
 8001410:	f7ff fea0 	bl	8001154 <next_unwind_byte>
 8001414:	0602      	lsls	r2, r0, #24
 8001416:	f04f 0402 	mov.w	r4, #2
 800141a:	d50c      	bpl.n	8001436 <__gnu_unwind_execute+0x28a>
 800141c:	9b03      	ldr	r3, [sp, #12]
 800141e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001422:	40a0      	lsls	r0, r4
 8001424:	4418      	add	r0, r3
 8001426:	9003      	str	r0, [sp, #12]
 8001428:	4630      	mov	r0, r6
 800142a:	f7ff fe93 	bl	8001154 <next_unwind_byte>
 800142e:	0603      	lsls	r3, r0, #24
 8001430:	f104 0407 	add.w	r4, r4, #7
 8001434:	d4f2      	bmi.n	800141c <__gnu_unwind_execute+0x270>
 8001436:	9b03      	ldr	r3, [sp, #12]
 8001438:	f8cd 9000 	str.w	r9, [sp]
 800143c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001440:	40a2      	lsls	r2, r4
 8001442:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001446:	441a      	add	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	9203      	str	r2, [sp, #12]
 800144c:	4619      	mov	r1, r3
 800144e:	220d      	movs	r2, #13
 8001450:	4628      	mov	r0, r5
 8001452:	f7ff faa7 	bl	80009a4 <_Unwind_VRS_Set>
 8001456:	e6b0      	b.n	80011ba <__gnu_unwind_execute+0xe>

08001458 <__gnu_unwind_frame>:
 8001458:	b510      	push	{r4, lr}
 800145a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800145c:	6853      	ldr	r3, [r2, #4]
 800145e:	b084      	sub	sp, #16
 8001460:	f04f 0c03 	mov.w	ip, #3
 8001464:	3208      	adds	r2, #8
 8001466:	021c      	lsls	r4, r3, #8
 8001468:	4608      	mov	r0, r1
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	a901      	add	r1, sp, #4
 800146e:	9401      	str	r4, [sp, #4]
 8001470:	9202      	str	r2, [sp, #8]
 8001472:	f88d c00c 	strb.w	ip, [sp, #12]
 8001476:	f88d 300d 	strb.w	r3, [sp, #13]
 800147a:	f7ff fe97 	bl	80011ac <__gnu_unwind_execute>
 800147e:	b004      	add	sp, #16
 8001480:	bd10      	pop	{r4, pc}
 8001482:	bf00      	nop

08001484 <_Unwind_GetRegionStart>:
 8001484:	b508      	push	{r3, lr}
 8001486:	f7ff fe8f 	bl	80011a8 <unwind_UCB_from_context>
 800148a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800148c:	bd08      	pop	{r3, pc}
 800148e:	bf00      	nop

08001490 <_Unwind_GetLanguageSpecificData>:
 8001490:	b508      	push	{r3, lr}
 8001492:	f7ff fe89 	bl	80011a8 <unwind_UCB_from_context>
 8001496:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001498:	79c3      	ldrb	r3, [r0, #7]
 800149a:	3302      	adds	r3, #2
 800149c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014a0:	bd08      	pop	{r3, pc}
 80014a2:	bf00      	nop

080014a4 <__aeabi_idiv0>:
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a31      	ldr	r2, [pc, #196]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_GPIO_Init+0xe0>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RA01_CS_Pin|RA01_RST_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f000 ff64 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOGGLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001502:	4822      	ldr	r0, [pc, #136]	; (800158c <MX_GPIO_Init+0xe4>)
 8001504:	f000 ff5e 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RA01_DIO0_Pin|RA01_BUSY_Pin;
 8001508:	2303      	movs	r3, #3
 800150a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001510:	2302      	movs	r3, #2
 8001512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 fdb7 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RA01_CS_Pin;
 8001522:	2310      	movs	r3, #16
 8001524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RA01_CS_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f000 fda8 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RA01_RST_Pin;
 8001540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RA01_RST_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f000 fd98 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOGGLE_Pin|LD2_Pin;
 8001560:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4619      	mov	r1, r3
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0xe4>)
 800157a:	f000 fd89 	bl	8002090 <HAL_GPIO_Init>

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	48000400 	.word	0x48000400

08001590 <_Z13checkLoraReadv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t checkLoraRead() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t packetSize = LoRa.parsePacket();
 8001596:	2100      	movs	r1, #0
 8001598:	482e      	ldr	r0, [pc, #184]	; (8001654 <_Z13checkLoraReadv+0xc4>)
 800159a:	f003 fc0e 	bl	8004dba <_ZN9LoRaClass11parsePacketEi>
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]

	bool recieved = false;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71bb      	strb	r3, [r7, #6]
	if (packetSize)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d04d      	beq.n	8001648 <_Z13checkLoraReadv+0xb8>
	{
	  recieved = true;
 80015ac:	2301      	movs	r3, #1
 80015ae:	71bb      	strb	r3, [r7, #6]
	  strcpy((char*)uartBuf, "RECIEVED: ");
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <_Z13checkLoraReadv+0xcc>)
 80015b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015b6:	c303      	stmia	r3!, {r0, r1}
 80015b8:	801a      	strh	r2, [r3, #0]
 80015ba:	3302      	adds	r3, #2
 80015bc:	0c12      	lsrs	r2, r2, #16
 80015be:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 80015c0:	4825      	ldr	r0, [pc, #148]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 80015c2:	f7fe fe2d 	bl	8000220 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	4922      	ldr	r1, [pc, #136]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 80015d0:	4823      	ldr	r0, [pc, #140]	; (8001660 <_Z13checkLoraReadv+0xd0>)
 80015d2:	f002 fcb7 	bl	8003f44 <HAL_UART_Transmit>
	  while (LoRa.available()) {
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <_Z13checkLoraReadv+0xc4>)
 80015d8:	f003 fc8c 	bl	8004ef4 <_ZN9LoRaClass9availableEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d018      	beq.n	800161e <_Z13checkLoraReadv+0x8e>
		  uint8_t data = LoRa.read();
 80015ec:	4819      	ldr	r0, [pc, #100]	; (8001654 <_Z13checkLoraReadv+0xc4>)
 80015ee:	f003 fc92 	bl	8004f16 <_ZN9LoRaClass4readEv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	717b      	strb	r3, [r7, #5]
		  uartBufLen = sprintf((char*)uartBuf, "%c", data);
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	461a      	mov	r2, r3
 80015fa:	491a      	ldr	r1, [pc, #104]	; (8001664 <_Z13checkLoraReadv+0xd4>)
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 80015fe:	f004 f891 	bl	8005724 <siprintf>
 8001602:	4603      	mov	r3, r0
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <_Z13checkLoraReadv+0xd8>)
 8001608:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, uartBufLen, HAL_MAX_DELAY);
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <_Z13checkLoraReadv+0xd8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b29a      	uxth	r2, r3
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	4910      	ldr	r1, [pc, #64]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <_Z13checkLoraReadv+0xd0>)
 8001618:	f002 fc94 	bl	8003f44 <HAL_UART_Transmit>
	  while (LoRa.available()) {
 800161c:	e7db      	b.n	80015d6 <_Z13checkLoraReadv+0x46>
	  }
	  strcpy((char*)uartBuf, "\r\n");
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <_Z13checkLoraReadv+0xdc>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4611      	mov	r1, r2
 8001626:	8019      	strh	r1, [r3, #0]
 8001628:	3302      	adds	r3, #2
 800162a:	0c12      	lsrs	r2, r2, #16
 800162c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 8001630:	f7fe fdf6 	bl	8000220 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	4906      	ldr	r1, [pc, #24]	; (8001658 <_Z13checkLoraReadv+0xc8>)
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <_Z13checkLoraReadv+0xd0>)
 8001640:	f002 fc80 	bl	8003f44 <HAL_UART_Transmit>
	  return 1;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <_Z13checkLoraReadv+0xba>
	}
	return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001ac 	.word	0x200001ac
 8001658:	2000008c 	.word	0x2000008c
 800165c:	080060b0 	.word	0x080060b0
 8001660:	20000118 	.word	0x20000118
 8001664:	080060bc 	.word	0x080060bc
 8001668:	200000ac 	.word	0x200000ac
 800166c:	080060c0 	.word	0x080060c0

08001670 <_Z12loraTransmitPhh>:

uint8_t loraTransmit(uint8_t loraTransmission[32], uint8_t loraTransmissionLen) {
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	strcpy((char*)uartBuf, "LoRa Transmit\r\n");
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <_Z12loraTransmitPhh+0x94>)
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <_Z12loraTransmitPhh+0x98>)
 8001680:	4614      	mov	r4, r2
 8001682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 8001688:	481e      	ldr	r0, [pc, #120]	; (8001704 <_Z12loraTransmitPhh+0x94>)
 800168a:	f7fe fdc9 	bl	8000220 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	491b      	ldr	r1, [pc, #108]	; (8001704 <_Z12loraTransmitPhh+0x94>)
 8001698:	481c      	ldr	r0, [pc, #112]	; (800170c <_Z12loraTransmitPhh+0x9c>)
 800169a:	f002 fc53 	bl	8003f44 <HAL_UART_Transmit>

	uint8_t result = LoRa.beginPacket();
 800169e:	2100      	movs	r1, #0
 80016a0:	481b      	ldr	r0, [pc, #108]	; (8001710 <_Z12loraTransmitPhh+0xa0>)
 80016a2:	f003 fb0a 	bl	8004cba <_ZN9LoRaClass11beginPacketEi>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
	if (result == 0) {
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d11a      	bne.n	80016e6 <_Z12loraTransmitPhh+0x76>
		strcpy((char*)uartBuf, "LoRa Transmit Already In Process\r\n");
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <_Z12loraTransmitPhh+0x94>)
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <_Z12loraTransmitPhh+0xa4>)
 80016b4:	4614      	mov	r4, r2
 80016b6:	461d      	mov	r5, r3
 80016b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	8022      	strh	r2, [r4, #0]
 80016c6:	3402      	adds	r4, #2
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <_Z12loraTransmitPhh+0x94>)
 80016ce:	f7fe fda7 	bl	8000220 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	490a      	ldr	r1, [pc, #40]	; (8001704 <_Z12loraTransmitPhh+0x94>)
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <_Z12loraTransmitPhh+0x9c>)
 80016de:	f002 fc31 	bl	8003f44 <HAL_UART_Transmit>
		return result;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	e00a      	b.n	80016fc <_Z12loraTransmitPhh+0x8c>
	}

	LoRa.write(loraTransmission, loraTransmissionLen);
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	461a      	mov	r2, r3
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <_Z12loraTransmitPhh+0xa0>)
 80016ee:	f003 fbc9 	bl	8004e84 <_ZN9LoRaClass5writeEPKhj>
	LoRa.endPacket();
 80016f2:	2100      	movs	r1, #0
 80016f4:	4806      	ldr	r0, [pc, #24]	; (8001710 <_Z12loraTransmitPhh+0xa0>)
 80016f6:	f003 fb09 	bl	8004d0c <_ZN9LoRaClass9endPacketEb>
	return result;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	2000008c 	.word	0x2000008c
 8001708:	080060c4 	.word	0x080060c4
 800170c:	20000118 	.word	0x20000118
 8001710:	200001ac 	.word	0x200001ac
 8001714:	080060d4 	.word	0x080060d4

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
 800171c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800171e:	f000 fb40 	bl	8001da2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f8e9 	bl	80018f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f7ff febf 	bl	80014a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800172a:	f000 fa6d 	bl	8001c08 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800172e:	f000 f933 	bl	8001998 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  strcpy((char*)uartBuf, "LoRa\r\n");
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <main+0x1b0>)
 8001734:	4a65      	ldr	r2, [pc, #404]	; (80018cc <main+0x1b4>)
 8001736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173a:	6018      	str	r0, [r3, #0]
 800173c:	3304      	adds	r3, #4
 800173e:	8019      	strh	r1, [r3, #0]
 8001740:	3302      	adds	r3, #2
 8001742:	0c0a      	lsrs	r2, r1, #16
 8001744:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 8001746:	4860      	ldr	r0, [pc, #384]	; (80018c8 <main+0x1b0>)
 8001748:	f7fe fd6a 	bl	8000220 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	495c      	ldr	r1, [pc, #368]	; (80018c8 <main+0x1b0>)
 8001756:	485e      	ldr	r0, [pc, #376]	; (80018d0 <main+0x1b8>)
 8001758:	f002 fbf4 	bl	8003f44 <HAL_UART_Transmit>

  // Reset RA01
  HAL_GPIO_WritePin(RA01_RST_GPIO_Port, RA01_RST_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f000 fe2d 	bl	80023c4 <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 800176a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800176e:	f000 fb89 	bl	8001e84 <HAL_Delay>
  HAL_GPIO_WritePin(RA01_RST_GPIO_Port, RA01_RST_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f000 fe22 	bl	80023c4 <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 8001780:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001784:	f000 fb7e 	bl	8001e84 <HAL_Delay>
  HAL_GPIO_WritePin(RA01_RST_GPIO_Port, RA01_RST_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 fe17 	bl	80023c4 <HAL_GPIO_WritePin>


  LoRa.setSPI(&hspi1, RA01_CS_GPIO_Port, RA01_CS_Pin, RA01_BUSY_GPIO_Port, RA01_BUSY_Pin);
 8001796:	2302      	movs	r3, #2
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2310      	movs	r3, #16
 80017a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017a6:	494b      	ldr	r1, [pc, #300]	; (80018d4 <main+0x1bc>)
 80017a8:	484b      	ldr	r0, [pc, #300]	; (80018d8 <main+0x1c0>)
 80017aa:	f003 fe88 	bl	80054be <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
  LoRa.setDIO(RA01_DIO0_GPIO_Port, RA01_DIO0_Pin);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80017b4:	4848      	ldr	r0, [pc, #288]	; (80018d8 <main+0x1c0>)
 80017b6:	f003 fe6f 	bl	8005498 <_ZN9LoRaClass6setDIOEP12GPIO_TypeDeft>

  HAL_Delay(1000);
 80017ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017be:	f000 fb61 	bl	8001e84 <HAL_Delay>
  uint8_t spiBuf[32];
  uint8_t val;


  if (!LoRa.begin(434E6)) {
 80017c2:	4946      	ldr	r1, [pc, #280]	; (80018dc <main+0x1c4>)
 80017c4:	4844      	ldr	r0, [pc, #272]	; (80018d8 <main+0x1c0>)
 80017c6:	f003 fa0b 	bl	8004be0 <_ZN9LoRaClass5beginEl>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d014      	beq.n	8001804 <main+0xec>
	  while (1) {
		  HAL_Delay(5000);
 80017da:	f241 3088 	movw	r0, #5000	; 0x1388
 80017de:	f000 fb51 	bl	8001e84 <HAL_Delay>
		  uartBufLen = sprintf((char*)uartBuf, "Lora Failed To Start\r\n");
 80017e2:	493f      	ldr	r1, [pc, #252]	; (80018e0 <main+0x1c8>)
 80017e4:	4838      	ldr	r0, [pc, #224]	; (80018c8 <main+0x1b0>)
 80017e6:	f003 ff9d 	bl	8005724 <siprintf>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <main+0x1cc>)
 80017f0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, uartBufLen, 100);
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <main+0x1cc>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	4933      	ldr	r1, [pc, #204]	; (80018c8 <main+0x1b0>)
 80017fc:	4834      	ldr	r0, [pc, #208]	; (80018d0 <main+0x1b8>)
 80017fe:	f002 fba1 	bl	8003f44 <HAL_UART_Transmit>
		  HAL_Delay(5000);
 8001802:	e7ea      	b.n	80017da <main+0xc2>
	  }
  }

  LoRa.setSignalBandwidth(125E3);
 8001804:	4938      	ldr	r1, [pc, #224]	; (80018e8 <main+0x1d0>)
 8001806:	4834      	ldr	r0, [pc, #208]	; (80018d8 <main+0x1c0>)
 8001808:	f003 fd42 	bl	8005290 <_ZN9LoRaClass18setSignalBandwidthEl>
  LoRa.setSpreadingFactor(125);
 800180c:	217d      	movs	r1, #125	; 0x7d
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <main+0x1c0>)
 8001810:	f003 fcac 	bl	800516c <_ZN9LoRaClass18setSpreadingFactorEi>
  LoRa.setCodingRate4(5);
 8001814:	2105      	movs	r1, #5
 8001816:	4830      	ldr	r0, [pc, #192]	; (80018d8 <main+0x1c0>)
 8001818:	f003 fdde 	bl	80053d8 <_ZN9LoRaClass14setCodingRate4Ei>
  LoRa.setDioMappings();
 800181c:	482e      	ldr	r0, [pc, #184]	; (80018d8 <main+0x1c0>)
 800181e:	f003 fc89 	bl	8005134 <_ZN9LoRaClass14setDioMappingsEv>

  uint16_t tx_count = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LoRa.idle();
 8001828:	482b      	ldr	r0, [pc, #172]	; (80018d8 <main+0x1c0>)
 800182a:	f003 fbce 	bl	8004fca <_ZN9LoRaClass4idleEv>
//  LoRa.setPreambleLength(0xffff);
  LoRa.setRxMode(true);
 800182e:	2101      	movs	r1, #1
 8001830:	4829      	ldr	r0, [pc, #164]	; (80018d8 <main+0x1c0>)
 8001832:	f003 fa1d 	bl	8004c70 <_ZN9LoRaClass9setRxModeEb>
//  checkLoraRead();
  while (1)
  {
	HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f000 fb24 	bl	8001e84 <HAL_Delay>
	if (HAL_GPIO_ReadPin(RA01_DIO0_GPIO_Port, RA01_DIO0_Pin) == 1) {
 800183c:	2101      	movs	r1, #1
 800183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001842:	f000 fda7 	bl	8002394 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <main+0x142>
		checkLoraRead();
 8001856:	f7ff fe9b 	bl	8001590 <_Z13checkLoraReadv>
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
//	HAL_Delay(2500);
//	HAL_GPIO_WritePin(TOGGLE_GPIO_Port, TOGGLE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	if (tx_count % 100 == 0) {
 800185a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800185e:	4a23      	ldr	r2, [pc, #140]	; (80018ec <main+0x1d4>)
 8001860:	fba2 1203 	umull	r1, r2, r2, r3
 8001864:	0952      	lsrs	r2, r2, #5
 8001866:	2164      	movs	r1, #100	; 0x64
 8001868:	fb01 f202 	mul.w	r2, r1, r2
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d123      	bne.n	80018bc <main+0x1a4>
		uint8_t loraTransmission[32];
		uint8_t loraTransmissionLen = sprintf((char*)loraTransmission, "Data:%02X ", (tx_count/15));
 8001874:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <main+0x1d8>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	b29b      	uxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	491b      	ldr	r1, [pc, #108]	; (80018f4 <main+0x1dc>)
 8001888:	4618      	mov	r0, r3
 800188a:	f003 ff4b 	bl	8005724 <siprintf>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		HAL_UART_Transmit(&huart2, loraTransmission, loraTransmissionLen, HAL_MAX_DELAY);
 8001894:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001898:	b29a      	uxth	r2, r3
 800189a:	1d39      	adds	r1, r7, #4
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <main+0x1b8>)
 80018a2:	f002 fb4f 	bl	8003f44 <HAL_UART_Transmit>
//		LoRa.idle();
//		LoRa.sleep();
//		LoRa.setSignalBandwidth(125E3);
		loraTransmit(loraTransmission, loraTransmissionLen);
 80018a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fede 	bl	8001670 <_Z12loraTransmitPhh>
		LoRa.setRxMode(true);
 80018b4:	2101      	movs	r1, #1
 80018b6:	4808      	ldr	r0, [pc, #32]	; (80018d8 <main+0x1c0>)
 80018b8:	f003 f9da 	bl	8004c70 <_ZN9LoRaClass9setRxModeEb>

	}

	tx_count++;
 80018bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018c0:	3301      	adds	r3, #1
 80018c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80018c6:	e7b6      	b.n	8001836 <main+0x11e>
 80018c8:	2000008c 	.word	0x2000008c
 80018cc:	080060f8 	.word	0x080060f8
 80018d0:	20000118 	.word	0x20000118
 80018d4:	200000b0 	.word	0x200000b0
 80018d8:	200001ac 	.word	0x200001ac
 80018dc:	19de5080 	.word	0x19de5080
 80018e0:	08006100 	.word	0x08006100
 80018e4:	200000ac 	.word	0x200000ac
 80018e8:	0001e848 	.word	0x0001e848
 80018ec:	51eb851f 	.word	0x51eb851f
 80018f0:	88888889 	.word	0x88888889
 80018f4:	08006118 	.word	0x08006118

080018f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	; 0x50
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	2238      	movs	r2, #56	; 0x38
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f003 ff04 	bl	8005714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800191e:	f000 fd69 	bl	80023f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fdff 	bl	800253c <HAL_RCC_OscConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800194e:	f000 f81d 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001952:	230f      	movs	r3, #15
 8001954:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001956:	2301      	movs	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f001 f8fe 	bl	8002b6c <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf14      	ite	ne
 8001976:	2301      	movne	r3, #1
 8001978:	2300      	moveq	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001980:	f000 f804 	bl	800198c <Error_Handler>
  }
}
 8001984:	bf00      	nop
 8001986:	3750      	adds	r7, #80	; 0x50
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_SPI1_Init+0x74>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <MX_SPI1_Init+0x78>)
 80019a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019e6:	2207      	movs	r2, #7
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019f2:	2208      	movs	r2, #8
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_SPI1_Init+0x74>)
 80019f8:	f001 fcc4 	bl	8003384 <HAL_SPI_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f7ff ffc3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000b0 	.word	0x200000b0
 8001a10:	40013000 	.word	0x40013000

08001a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_SPI_MspInit+0x7c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d128      	bne.n	8001a88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_SPI_MspInit+0x80>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <HAL_SPI_MspInit+0x80>)
 8001a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a40:	6613      	str	r3, [r2, #96]	; 0x60
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_SPI_MspInit+0x80>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_SPI_MspInit+0x80>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_SPI_MspInit+0x80>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_MspInit+0x80>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23e0      	movs	r3, #224	; 0xe0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a84:	f000 fb04 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f98c 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4e:	f003 fdb7 	bl	80056c0 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
	return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f003 fd8a 	bl	80056c0 <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20008000 	.word	0x20008000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000114 	.word	0x20000114
 8001be0:	200001f0 	.word	0x200001f0

08001be4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_USART2_UART_Init+0x94>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c52:	f002 f927 	bl	8003ea4 <HAL_UART_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c5c:	f7ff fe96 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c64:	f002 febe 	bl	80049e4 <HAL_UARTEx_SetTxFifoThreshold>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c6e:	f7ff fe8d 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c76:	f002 fef3 	bl	8004a60 <HAL_UARTEx_SetRxFifoThreshold>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c80:	f7ff fe84 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_USART2_UART_Init+0x90>)
 8001c86:	f002 fe74 	bl	8004972 <HAL_UARTEx_DisableFifoMode>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c90:	f7ff fe7c 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000118 	.word	0x20000118
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09a      	sub	sp, #104	; 0x68
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2244      	movs	r2, #68	; 0x44
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fd27 	bl	8005714 <memset>
  if(uartHandle->Instance==USART2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_UART_MspInit+0xa8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d136      	bne.n	8001d3e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 f961 	bl	8002fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ce8:	f7ff fe50 	bl	800198c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_UART_MspInit+0xac>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_UART_MspInit+0xac>)
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_UART_MspInit+0xac>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_UART_MspInit+0xac>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_UART_MspInit+0xac>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_UART_MspInit+0xac>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f000 f9a9 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3768      	adds	r7, #104	; 0x68
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	40021000 	.word	0x40021000

08001d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490e      	ldr	r1, [pc, #56]	; (8001d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0b      	ldr	r4, [pc, #44]	; (8001d9c <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d7a:	f7ff ff33 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 fca5 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d82:	f7ff fcc9 	bl	8001718 <main>

08001d86 <LoopForever>:

LoopForever:
    b LoopForever
 8001d86:	e7fe      	b.n	8001d86 <LoopForever>
  ldr   r0, =_estack
 8001d88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d94:	080062f4 	.word	0x080062f4
  ldr r2, =_sbss
 8001d98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d9c:	200001f0 	.word	0x200001f0

08001da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC1_2_IRQHandler>

08001da2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 f93d 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f80e 	bl	8001dd4 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	e001      	b.n	8001dc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dc4:	f7ff fe68 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dc8:	79fb      	ldrb	r3, [r7, #7]

}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_InitTick+0x68>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d022      	beq.n	8001e2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_InitTick+0x6c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_InitTick+0x68>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f93a 	bl	8002076 <HAL_SYSTICK_Config>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10f      	bne.n	8001e28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	d809      	bhi.n	8001e22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295
 8001e16:	f000 f914 	bl	8002042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_InitTick+0x70>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e007      	b.n	8001e32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e004      	b.n	8001e32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e001      	b.n	8001e32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x20>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e58:	6013      	str	r3, [r2, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	200001a8 	.word	0x200001a8
 8001e68:	20000008 	.word	0x20000008

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200001a8 	.word	0x200001a8

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d004      	beq.n	8001ea8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_Delay+0x40>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea8:	bf00      	nop
 8001eaa:	f7ff ffdf 	bl	8001e6c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d8f7      	bhi.n	8001eaa <HAL_Delay+0x26>
  {
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff47 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff5e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffb2 	bl	8001fe8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800209e:	e15a      	b.n	8002356 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 814c 	beq.w	8002350 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d130      	bne.n	8002132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002106:	2201      	movs	r2, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0201 	and.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b03      	cmp	r3, #3
 800213c:	d017      	beq.n	800216e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d123      	bne.n	80021c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	6939      	ldr	r1, [r7, #16]
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80a6 	beq.w	8002350 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002204:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_GPIO_Init+0x2e4>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002208:	4a5a      	ldr	r2, [pc, #360]	; (8002374 <HAL_GPIO_Init+0x2e4>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6613      	str	r3, [r2, #96]	; 0x60
 8002210:	4b58      	ldr	r3, [pc, #352]	; (8002374 <HAL_GPIO_Init+0x2e4>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x2e8>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002246:	d01f      	beq.n	8002288 <HAL_GPIO_Init+0x1f8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a4c      	ldr	r2, [pc, #304]	; (800237c <HAL_GPIO_Init+0x2ec>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d019      	beq.n	8002284 <HAL_GPIO_Init+0x1f4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d013      	beq.n	8002280 <HAL_GPIO_Init+0x1f0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x2f4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00d      	beq.n	800227c <HAL_GPIO_Init+0x1ec>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a49      	ldr	r2, [pc, #292]	; (8002388 <HAL_GPIO_Init+0x2f8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x1e8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_GPIO_Init+0x2fc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_GPIO_Init+0x1e4>
 8002270:	2305      	movs	r3, #5
 8002272:	e00a      	b.n	800228a <HAL_GPIO_Init+0x1fa>
 8002274:	2306      	movs	r3, #6
 8002276:	e008      	b.n	800228a <HAL_GPIO_Init+0x1fa>
 8002278:	2304      	movs	r3, #4
 800227a:	e006      	b.n	800228a <HAL_GPIO_Init+0x1fa>
 800227c:	2303      	movs	r3, #3
 800227e:	e004      	b.n	800228a <HAL_GPIO_Init+0x1fa>
 8002280:	2302      	movs	r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x1fa>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_GPIO_Init+0x1fa>
 8002288:	2300      	movs	r3, #0
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	f002 0203 	and.w	r2, r2, #3
 8002290:	0092      	lsls	r2, r2, #2
 8002292:	4093      	lsls	r3, r2
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229a:	4937      	ldr	r1, [pc, #220]	; (8002378 <HAL_GPIO_Init+0x2e8>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a8:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_GPIO_Init+0x300>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022cc:	4a30      	ldr	r2, [pc, #192]	; (8002390 <HAL_GPIO_Init+0x300>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_GPIO_Init+0x300>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f6:	4a26      	ldr	r2, [pc, #152]	; (8002390 <HAL_GPIO_Init+0x300>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_GPIO_Init+0x300>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <HAL_GPIO_Init+0x300>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_GPIO_Init+0x300>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_GPIO_Init+0x300>)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	f47f ae9d 	bne.w	80020a0 <HAL_GPIO_Init+0x10>
  }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40021000 	.word	0x40021000
 8002378:	40010000 	.word	0x40010000
 800237c:	48000400 	.word	0x48000400
 8002380:	48000800 	.word	0x48000800
 8002384:	48000c00 	.word	0x48000c00
 8002388:	48001000 	.word	0x48001000
 800238c:	48001400 	.word	0x48001400
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d141      	bne.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240e:	d131      	bne.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002416:	4a46      	ldr	r2, [pc, #280]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002420:	4b43      	ldr	r3, [pc, #268]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002428:	4a41      	ldr	r2, [pc, #260]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2232      	movs	r2, #50	; 0x32
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a3f      	ldr	r2, [pc, #252]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0c9b      	lsrs	r3, r3, #18
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002446:	e002      	b.n	800244e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3b01      	subs	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d102      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f2      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246e:	d158      	bne.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e057      	b.n	8002524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800247a:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002484:	e04d      	b.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248c:	d141      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	d131      	bne.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2232      	movs	r2, #50	; 0x32
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d2:	e002      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	d102      	bne.n	80024ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f2      	bne.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fa:	d112      	bne.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e011      	b.n	8002524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002510:	e007      	b.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002520:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40007000 	.word	0x40007000
 8002534:	20000000 	.word	0x20000000
 8002538:	431bde83 	.word	0x431bde83

0800253c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e306      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d075      	beq.n	8002646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002564:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d102      	bne.n	800257a <HAL_RCC_OscConfig+0x3e>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d002      	beq.n	8002580 <HAL_RCC_OscConfig+0x44>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05b      	beq.n	8002644 <HAL_RCC_OscConfig+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d157      	bne.n	8002644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e2e1      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x74>
 80025a2:	4b85      	ldr	r3, [pc, #532]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a84      	ldr	r2, [pc, #528]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x98>
 80025ba:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7e      	ldr	r2, [pc, #504]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b7c      	ldr	r3, [pc, #496]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7b      	ldr	r2, [pc, #492]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025d4:	4b78      	ldr	r3, [pc, #480]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a77      	ldr	r2, [pc, #476]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b75      	ldr	r3, [pc, #468]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a74      	ldr	r2, [pc, #464]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7ff fc3a 	bl	8001e6c <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff fc36 	bl	8001e6c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e2a6      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260e:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xc0>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff fc26 	bl	8001e6c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fc22 	bl	8001e6c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e292      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002636:	4b60      	ldr	r3, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0xe8>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d075      	beq.n	800273e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d102      	bne.n	8002672 <HAL_RCC_OscConfig+0x136>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d002      	beq.n	8002678 <HAL_RCC_OscConfig+0x13c>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11f      	bne.n	80026b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002678:	4b4f      	ldr	r3, [pc, #316]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_OscConfig+0x154>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e265      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	4946      	ldr	r1, [pc, #280]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026a4:	4b45      	ldr	r3, [pc, #276]	; (80027bc <HAL_RCC_OscConfig+0x280>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fb93 	bl	8001dd4 <HAL_InitTick>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d043      	beq.n	800273c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e251      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d023      	beq.n	8002708 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3c      	ldr	r2, [pc, #240]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff fbce 	bl	8001e6c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7ff fbca 	bl	8001e6c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e23a      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	492d      	ldr	r1, [pc, #180]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
 8002706:	e01a      	b.n	800273e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800270e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff fbaa 	bl	8001e6c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff fba6 	bl	8001e6c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e216      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1e0>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d041      	beq.n	80027ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01c      	beq.n	800278c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7ff fb83 	bl	8001e6c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276a:	f7ff fb7f 	bl	8001e6c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1ef      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ef      	beq.n	800276a <HAL_RCC_OscConfig+0x22e>
 800278a:	e020      	b.n	80027ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff fb66 	bl	8001e6c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a2:	e00d      	b.n	80027c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff fb62 	bl	8001e6c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d906      	bls.n	80027c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1d2      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c0:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ea      	bne.n	80027a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a6 	beq.w	8002928 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027e0:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2b4>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x2b6>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b7f      	ldr	r3, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	4a7e      	ldr	r2, [pc, #504]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	6593      	str	r3, [r2, #88]	; 0x58
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800280e:	2301      	movs	r3, #1
 8002810:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002812:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <HAL_RCC_OscConfig+0x4bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x4bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x4bc>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282a:	f7ff fb1f 	bl	8001e6c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7ff fb1b 	bl	8001e6c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e18b      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002844:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x4bc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d108      	bne.n	800286a <HAL_RCC_OscConfig+0x32e>
 8002858:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002868:	e024      	b.n	80028b4 <HAL_RCC_OscConfig+0x378>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d110      	bne.n	8002894 <HAL_RCC_OscConfig+0x358>
 8002872:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002882:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002892:	e00f      	b.n	80028b4 <HAL_RCC_OscConfig+0x378>
 8002894:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	4a56      	ldr	r2, [pc, #344]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7ff fad6 	bl	8001e6c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7ff fad2 	bl	8001e6c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e140      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ed      	beq.n	80028c4 <HAL_RCC_OscConfig+0x388>
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7ff fabf 	bl	8001e6c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7ff fabb 	bl	8001e6c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e129      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ed      	bne.n	80028f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	4a34      	ldr	r2, [pc, #208]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03c      	beq.n	80029ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800293e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002942:	4a2c      	ldr	r2, [pc, #176]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7ff fa8e 	bl	8001e6c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002954:	f7ff fa8a 	bl	8001e6c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0fa      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCC_OscConfig+0x418>
 8002974:	e01b      	b.n	80029ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 8002978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7ff fa71 	bl	8001e6c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298e:	f7ff fa6d 	bl	8001e6c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0dd      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80029a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ef      	bne.n	800298e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80d1 	beq.w	8002b5a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	f000 808b 	beq.w	8002adc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d15e      	bne.n	8002a8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7ff fa47 	bl	8001e6c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	e00c      	b.n	80029fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7ff fa43 	bl	8001e6c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d905      	bls.n	80029fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0b3      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a08:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCC_OscConfig+0x62c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6a11      	ldr	r1, [r2, #32]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a22:	0212      	lsls	r2, r2, #8
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0552      	lsls	r2, r2, #21
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a36:	0852      	lsrs	r2, r2, #1
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0652      	lsls	r2, r2, #25
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a42:	06d2      	lsls	r2, r2, #27
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4947      	ldr	r1, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a41      	ldr	r2, [pc, #260]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff fa02 	bl	8001e6c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff f9fe 	bl	8001e6c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e06e      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x530>
 8002a8a:	e066      	b.n	8002b5a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002aaa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f9da 	bl	8001e6c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7ff f9d6 	bl	8001e6c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e046      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ace:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x580>
 8002ada:	e03e      	b.n	8002b5a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e039      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_OscConfig+0x628>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d12c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	3b01      	subs	r3, #1
 8002b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d123      	bne.n	8002b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11b      	bne.n	8002b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d113      	bne.n	8002b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	019f800c 	.word	0x019f800c

08002b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e11e      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b91      	ldr	r3, [pc, #580]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d910      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b8e      	ldr	r3, [pc, #568]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 020f 	bic.w	r2, r3, #15
 8002b9a:	498c      	ldr	r1, [pc, #560]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b8a      	ldr	r3, [pc, #552]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e106      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d073      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d129      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc8:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0f4      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bd8:	f000 f99e 	bl	8002f18 <RCC_GetSysClockFreqFromPLLSource>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4a7c      	ldr	r2, [pc, #496]	; (8002dd4 <HAL_RCC_ClockConfig+0x268>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d93f      	bls.n	8002c66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002be6:	4b7a      	ldr	r3, [pc, #488]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d033      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d12f      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c06:	4b72      	ldr	r3, [pc, #456]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c0e:	4a70      	ldr	r2, [pc, #448]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e024      	b.n	8002c66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c24:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0c6      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c34:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0be      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c44:	f000 f8ce 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4a61      	ldr	r2, [pc, #388]	; (8002dd4 <HAL_RCC_ClockConfig+0x268>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d909      	bls.n	8002c66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c52:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5a:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4957      	ldr	r1, [pc, #348]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c78:	f7ff f8f8 	bl	8001e6c <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7ff f8f4 	bl	8001e6c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e095      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b4e      	ldr	r3, [pc, #312]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d023      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ce0:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4936      	ldr	r1, [pc, #216]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b80      	cmp	r3, #128	; 0x80
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d21d      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 020f 	bic.w	r2, r3, #15
 8002d24:	4929      	ldr	r1, [pc, #164]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d2c:	f7ff f89e 	bl	8001e6c <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7ff f89a 	bl	8001e6c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e03b      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1ed      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4917      	ldr	r1, [pc, #92]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490f      	ldr	r1, [pc, #60]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d96:	f000 f825 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_ClockConfig+0x264>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <HAL_RCC_ClockConfig+0x26c>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_RCC_ClockConfig+0x270>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x274>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f80a 	bl	8001dd4 <HAL_InitTick>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	04c4b400 	.word	0x04c4b400
 8002dd8:	0800612c 	.word	0x0800612c
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d102      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df6:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e047      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d102      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e08:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	e03e      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d136      	bne.n	8002e88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	3301      	adds	r3, #1
 8002e30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d10c      	bne.n	8002e52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e38:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e42:	68d2      	ldr	r2, [r2, #12]
 8002e44:	0a12      	lsrs	r2, r2, #8
 8002e46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e52:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e5c:	68d2      	ldr	r2, [r2, #12]
 8002e5e:	0a12      	lsrs	r2, r2, #8
 8002e60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
      break;
 8002e6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0e5b      	lsrs	r3, r3, #25
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	3301      	adds	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	e001      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e8c:	693b      	ldr	r3, [r7, #16]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200

08002ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	0800613c 	.word	0x0800613c

08002eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef0:	f7ff ffda 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0adb      	lsrs	r3, r3, #11
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	0800613c 	.word	0x0800613c

08002f18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3301      	adds	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d10c      	bne.n	8002f56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f46:	68d2      	ldr	r2, [r2, #12]
 8002f48:	0a12      	lsrs	r2, r2, #8
 8002f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
    break;
 8002f54:	e00c      	b.n	8002f70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	0a12      	lsrs	r2, r2, #8
 8002f64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
    break;
 8002f6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0e5b      	lsrs	r3, r3, #25
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f8a:	687b      	ldr	r3, [r7, #4]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	007a1200 	.word	0x007a1200
 8002fa0:	00f42400 	.word	0x00f42400

08002fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fac:	2300      	movs	r3, #0
 8002fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8098 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10d      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4a3f      	ldr	r2, [pc, #252]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fee:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a39      	ldr	r2, [pc, #228]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffa:	f7fe ff37 	bl	8001e6c <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003000:	e009      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003002:	f7fe ff33 	bl	8001e6c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d902      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	74fb      	strb	r3, [r7, #19]
        break;
 8003014:	e005      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ef      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d159      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01e      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d019      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fef3 	bl	8001e6c <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003088:	e00b      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe feef 	bl	8001e6c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d902      	bls.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	74fb      	strb	r3, [r7, #19]
            break;
 80030a0:	e006      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ec      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030cc:	e008      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	74bb      	strb	r3, [r7, #18]
 80030d2:	e005      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e0:	7c7b      	ldrb	r3, [r7, #17]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4ba6      	ldr	r3, [pc, #664]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ea:	4aa5      	ldr	r2, [pc, #660]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fe:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 0203 	bic.w	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	499c      	ldr	r1, [pc, #624]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003120:	4b97      	ldr	r3, [pc, #604]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 020c 	bic.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4994      	ldr	r1, [pc, #592]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003142:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	498b      	ldr	r1, [pc, #556]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003164:	4b86      	ldr	r3, [pc, #536]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	4983      	ldr	r1, [pc, #524]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003186:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	497a      	ldr	r1, [pc, #488]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a8:	4b75      	ldr	r3, [pc, #468]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ca:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4969      	ldr	r1, [pc, #420]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ec:	4b64      	ldr	r3, [pc, #400]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4961      	ldr	r1, [pc, #388]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800320e:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	4958      	ldr	r1, [pc, #352]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	4950      	ldr	r1, [pc, #320]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324e:	d105      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a4a      	ldr	r2, [pc, #296]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003268:	4b45      	ldr	r3, [pc, #276]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	4942      	ldr	r1, [pc, #264]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003286:	d105      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a3c      	ldr	r2, [pc, #240]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d015      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032a0:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4934      	ldr	r1, [pc, #208]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032be:	d105      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d8:	4b29      	ldr	r3, [pc, #164]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	4926      	ldr	r1, [pc, #152]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f6:	d105      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a20      	ldr	r2, [pc, #128]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	4918      	ldr	r1, [pc, #96]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800332e:	d105      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	490a      	ldr	r1, [pc, #40]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003366:	d105      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003374:	7cbb      	ldrb	r3, [r7, #18]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e09d      	b.n	80034d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a6:	d009      	beq.n	80033bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
 80033ae:	e005      	b.n	80033bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fe fb1c 	bl	8001a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033fc:	d902      	bls.n	8003404 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e002      	b.n	800340a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003408:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003412:	d007      	beq.n	8003424 <HAL_SPI_Init+0xa0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	ea42 0103 	orr.w	r1, r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	0c1b      	lsrs	r3, r3, #16
 8003480:	f003 0204 	and.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b088      	sub	sp, #32
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_SPI_Transmit+0x22>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e158      	b.n	80037ae <HAL_SPI_Transmit+0x2d4>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003504:	f7fe fcb2 	bl	8001e6c <HAL_GetTick>
 8003508:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d002      	beq.n	8003520 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800351e:	e13d      	b.n	800379c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Transmit+0x52>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003530:	e134      	b.n	800379c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2203      	movs	r2, #3
 8003536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	d10f      	bne.n	800359e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800359c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d007      	beq.n	80035bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c4:	d94b      	bls.n	800365e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_Transmit+0xfa>
 80035ce:	8afb      	ldrh	r3, [r7, #22]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d13e      	bne.n	8003652 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035f8:	e02b      	b.n	8003652 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d112      	bne.n	800362e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800362c:	e011      	b.n	8003652 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362e:	f7fe fc1d 	bl	8001e6c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d803      	bhi.n	8003646 <HAL_SPI_Transmit+0x16c>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d102      	bne.n	800364c <HAL_SPI_Transmit+0x172>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003650:	e0a4      	b.n	800379c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ce      	bne.n	80035fa <HAL_SPI_Transmit+0x120>
 800365c:	e07c      	b.n	8003758 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Transmit+0x192>
 8003666:	8afb      	ldrh	r3, [r7, #22]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d170      	bne.n	800374e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d912      	bls.n	800369c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	881a      	ldrh	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b02      	subs	r3, #2
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e
 800369a:	e058      	b.n	800374e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036c2:	e044      	b.n	800374e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d12b      	bne.n	800372a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d912      	bls.n	8003702 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b02      	subs	r3, #2
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003700:	e025      	b.n	800374e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003728:	e011      	b.n	800374e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372a:	f7fe fb9f 	bl	8001e6c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d803      	bhi.n	8003742 <HAL_SPI_Transmit+0x268>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x26e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800374c:	e026      	b.n	800379c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1b5      	bne.n	80036c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fb5b 	bl	8003e18 <SPI_EndRxTxTransaction>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e000      	b.n	800379c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800379a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b08a      	sub	sp, #40	; 0x28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037c4:	2301      	movs	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x26>
 80037d8:	2302      	movs	r3, #2
 80037da:	e1fb      	b.n	8003bd4 <HAL_SPI_TransmitReceive+0x41e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037e4:	f7fe fb42 	bl	8001e6c <HAL_GetTick>
 80037e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003800:	7efb      	ldrb	r3, [r7, #27]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d00e      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x6e>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380c:	d106      	bne.n	800381c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <HAL_SPI_TransmitReceive+0x66>
 8003816:	7efb      	ldrb	r3, [r7, #27]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d003      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003822:	e1cd      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_SPI_TransmitReceive+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_SPI_TransmitReceive+0x80>
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800383c:	e1c0      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b04      	cmp	r3, #4
 8003848:	d003      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2205      	movs	r2, #5
 800384e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	887a      	ldrh	r2, [r7, #2]
 800386a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	887a      	ldrh	r2, [r7, #2]
 800387e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003894:	d802      	bhi.n	800389c <HAL_SPI_TransmitReceive+0xe6>
 8003896:	8a3b      	ldrh	r3, [r7, #16]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d908      	bls.n	80038ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	e007      	b.n	80038be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d007      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e4:	d97c      	bls.n	80039e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x13e>
 80038ee:	8a7b      	ldrh	r3, [r7, #18]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d169      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003918:	e056      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d11b      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x1aa>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_SPI_TransmitReceive+0x1aa>
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	2b01      	cmp	r3, #1
 8003936:	d113      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d11c      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x1f2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	b292      	uxth	r2, r2
 8003986:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039a8:	f7fe fa60 	bl	8001e6c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d807      	bhi.n	80039c8 <HAL_SPI_TransmitReceive+0x212>
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d003      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80039c6:	e0fb      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1a3      	bne.n	800391a <HAL_SPI_TransmitReceive+0x164>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d19d      	bne.n	800391a <HAL_SPI_TransmitReceive+0x164>
 80039de:	e0df      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x23a>
 80039e8:	8a7b      	ldrh	r3, [r7, #18]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 80cb 	bne.w	8003b86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d912      	bls.n	8003a20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b02      	subs	r3, #2
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a1e:	e0b2      	b.n	8003b86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a46:	e09e      	b.n	8003b86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d134      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x30a>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x30a>
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d12c      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d912      	bls.n	8003a96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	881a      	ldrh	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b02      	subs	r3, #2
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a94:	e012      	b.n	8003abc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d148      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x3aa>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d042      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d923      	bls.n	8003b2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	b292      	uxth	r2, r2
 8003af2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b02      	subs	r3, #2
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d81f      	bhi.n	8003b5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	e016      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f103 020c 	add.w	r2, r3, #12
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b60:	f7fe f984 	bl	8001e6c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d803      	bhi.n	8003b78 <HAL_SPI_TransmitReceive+0x3c2>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d102      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x3c8>
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b84:	e01c      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f47f af5b 	bne.w	8003a48 <HAL_SPI_TransmitReceive+0x292>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f47f af54 	bne.w	8003a48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f937 	bl	8003e18 <SPI_EndRxTxTransaction>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60
 8003bbc:	e000      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003bbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3728      	adds	r7, #40	; 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bec:	f7fe f93e 	bl	8001e6c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bfc:	f7fe f936 	bl	8001e6c <HAL_GetTick>
 8003c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	015b      	lsls	r3, r3, #5
 8003c08:	0d1b      	lsrs	r3, r3, #20
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c12:	e054      	b.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d050      	beq.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c1c:	f7fe f926 	bl	8001e6c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d902      	bls.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d13d      	bne.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4a:	d111      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c54:	d004      	beq.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5e:	d107      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d10f      	bne.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e017      	b.n	8003cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d19b      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000000 	.word	0x20000000

08003cec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cfe:	f7fe f8b5 	bl	8001e6c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d0e:	f7fe f8ad 	bl	8001e6c <HAL_GetTick>
 8003d12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	; (8003e14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00da      	lsls	r2, r3, #3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	0d1b      	lsrs	r3, r3, #20
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d34:	e060      	b.n	8003df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d3c:	d107      	bne.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d050      	beq.n	8003df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d56:	f7fe f889 	bl	8001e6c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d902      	bls.n	8003d6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d13d      	bne.n	8003de8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d84:	d111      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8e:	d004      	beq.n	8003d9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d98:	d107      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db2:	d10f      	bne.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e010      	b.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d196      	bne.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3728      	adds	r7, #40	; 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000000 	.word	0x20000000

08003e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff ff5b 	bl	8003cec <SPI_WaitFifoStateUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e027      	b.n	8003e9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff fec0 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e014      	b.n	8003e9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff34 	bl	8003cec <SPI_WaitFifoStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e000      	b.n	8003e9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e042      	b.n	8003f3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fd fee9 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2224      	movs	r2, #36	; 0x24
 8003ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8c2 	bl	8004070 <UART_SetConfig>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e022      	b.n	8003f3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fb82 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fc09 	bl	800474c <UART_CheckIdleState>
 8003f3a:	4603      	mov	r3, r0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	f040 8083 	bne.w	8004066 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Transmit+0x28>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e07b      	b.n	8004068 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x3a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e074      	b.n	8004068 <HAL_UART_Transmit+0x124>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2221      	movs	r2, #33	; 0x21
 8003f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f96:	f7fd ff69 	bl	8001e6c <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d108      	bne.n	8003fc8 <HAL_UART_Transmit+0x84>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e003      	b.n	8003fd0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003fd8:	e02c      	b.n	8004034 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	; 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fbfc 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e039      	b.n	8004068 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	3302      	adds	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e007      	b.n	8004022 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1cc      	bne.n	8003fda <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	2140      	movs	r1, #64	; 0x40
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fbc9 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e006      	b.n	8004068 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004074:	b08c      	sub	sp, #48	; 0x30
 8004076:	af00      	add	r7, sp, #0
 8004078:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	431a      	orrs	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4313      	orrs	r3, r2
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4bab      	ldr	r3, [pc, #684]	; (800434c <UART_SetConfig+0x2dc>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4aa0      	ldr	r2, [pc, #640]	; (8004350 <UART_SetConfig+0x2e0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d8:	4313      	orrs	r3, r2
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f023 010f 	bic.w	r1, r3, #15
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a91      	ldr	r2, [pc, #580]	; (8004354 <UART_SetConfig+0x2e4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d125      	bne.n	8004160 <UART_SetConfig+0xf0>
 8004114:	4b90      	ldr	r3, [pc, #576]	; (8004358 <UART_SetConfig+0x2e8>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d81a      	bhi.n	8004158 <UART_SetConfig+0xe8>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0xb8>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004139 	.word	0x08004139
 800412c:	08004149 	.word	0x08004149
 8004130:	08004141 	.word	0x08004141
 8004134:	08004151 	.word	0x08004151
 8004138:	2301      	movs	r3, #1
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413e:	e0d6      	b.n	80042ee <UART_SetConfig+0x27e>
 8004140:	2302      	movs	r3, #2
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004146:	e0d2      	b.n	80042ee <UART_SetConfig+0x27e>
 8004148:	2304      	movs	r3, #4
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414e:	e0ce      	b.n	80042ee <UART_SetConfig+0x27e>
 8004150:	2308      	movs	r3, #8
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004156:	e0ca      	b.n	80042ee <UART_SetConfig+0x27e>
 8004158:	2310      	movs	r3, #16
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e0c6      	b.n	80042ee <UART_SetConfig+0x27e>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a7d      	ldr	r2, [pc, #500]	; (800435c <UART_SetConfig+0x2ec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d138      	bne.n	80041dc <UART_SetConfig+0x16c>
 800416a:	4b7b      	ldr	r3, [pc, #492]	; (8004358 <UART_SetConfig+0x2e8>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b0c      	cmp	r3, #12
 8004176:	d82d      	bhi.n	80041d4 <UART_SetConfig+0x164>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0x110>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ba:	e098      	b.n	80042ee <UART_SetConfig+0x27e>
 80041bc:	2302      	movs	r3, #2
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c2:	e094      	b.n	80042ee <UART_SetConfig+0x27e>
 80041c4:	2304      	movs	r3, #4
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ca:	e090      	b.n	80042ee <UART_SetConfig+0x27e>
 80041cc:	2308      	movs	r3, #8
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e08c      	b.n	80042ee <UART_SetConfig+0x27e>
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041da:	e088      	b.n	80042ee <UART_SetConfig+0x27e>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a5f      	ldr	r2, [pc, #380]	; (8004360 <UART_SetConfig+0x2f0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d125      	bne.n	8004232 <UART_SetConfig+0x1c2>
 80041e6:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <UART_SetConfig+0x2e8>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d016      	beq.n	8004222 <UART_SetConfig+0x1b2>
 80041f4:	2b30      	cmp	r3, #48	; 0x30
 80041f6:	d818      	bhi.n	800422a <UART_SetConfig+0x1ba>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d00a      	beq.n	8004212 <UART_SetConfig+0x1a2>
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d814      	bhi.n	800422a <UART_SetConfig+0x1ba>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <UART_SetConfig+0x19a>
 8004204:	2b10      	cmp	r3, #16
 8004206:	d008      	beq.n	800421a <UART_SetConfig+0x1aa>
 8004208:	e00f      	b.n	800422a <UART_SetConfig+0x1ba>
 800420a:	2300      	movs	r3, #0
 800420c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004210:	e06d      	b.n	80042ee <UART_SetConfig+0x27e>
 8004212:	2302      	movs	r3, #2
 8004214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004218:	e069      	b.n	80042ee <UART_SetConfig+0x27e>
 800421a:	2304      	movs	r3, #4
 800421c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004220:	e065      	b.n	80042ee <UART_SetConfig+0x27e>
 8004222:	2308      	movs	r3, #8
 8004224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004228:	e061      	b.n	80042ee <UART_SetConfig+0x27e>
 800422a:	2310      	movs	r3, #16
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004230:	e05d      	b.n	80042ee <UART_SetConfig+0x27e>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4b      	ldr	r2, [pc, #300]	; (8004364 <UART_SetConfig+0x2f4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d125      	bne.n	8004288 <UART_SetConfig+0x218>
 800423c:	4b46      	ldr	r3, [pc, #280]	; (8004358 <UART_SetConfig+0x2e8>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d016      	beq.n	8004278 <UART_SetConfig+0x208>
 800424a:	2bc0      	cmp	r3, #192	; 0xc0
 800424c:	d818      	bhi.n	8004280 <UART_SetConfig+0x210>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d00a      	beq.n	8004268 <UART_SetConfig+0x1f8>
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d814      	bhi.n	8004280 <UART_SetConfig+0x210>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <UART_SetConfig+0x1f0>
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d008      	beq.n	8004270 <UART_SetConfig+0x200>
 800425e:	e00f      	b.n	8004280 <UART_SetConfig+0x210>
 8004260:	2300      	movs	r3, #0
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004266:	e042      	b.n	80042ee <UART_SetConfig+0x27e>
 8004268:	2302      	movs	r3, #2
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426e:	e03e      	b.n	80042ee <UART_SetConfig+0x27e>
 8004270:	2304      	movs	r3, #4
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004276:	e03a      	b.n	80042ee <UART_SetConfig+0x27e>
 8004278:	2308      	movs	r3, #8
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427e:	e036      	b.n	80042ee <UART_SetConfig+0x27e>
 8004280:	2310      	movs	r3, #16
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004286:	e032      	b.n	80042ee <UART_SetConfig+0x27e>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a30      	ldr	r2, [pc, #192]	; (8004350 <UART_SetConfig+0x2e0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12a      	bne.n	80042e8 <UART_SetConfig+0x278>
 8004292:	4b31      	ldr	r3, [pc, #196]	; (8004358 <UART_SetConfig+0x2e8>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800429c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a0:	d01a      	beq.n	80042d8 <UART_SetConfig+0x268>
 80042a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a6:	d81b      	bhi.n	80042e0 <UART_SetConfig+0x270>
 80042a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ac:	d00c      	beq.n	80042c8 <UART_SetConfig+0x258>
 80042ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b2:	d815      	bhi.n	80042e0 <UART_SetConfig+0x270>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <UART_SetConfig+0x250>
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d008      	beq.n	80042d0 <UART_SetConfig+0x260>
 80042be:	e00f      	b.n	80042e0 <UART_SetConfig+0x270>
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	e012      	b.n	80042ee <UART_SetConfig+0x27e>
 80042c8:	2302      	movs	r3, #2
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ce:	e00e      	b.n	80042ee <UART_SetConfig+0x27e>
 80042d0:	2304      	movs	r3, #4
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d6:	e00a      	b.n	80042ee <UART_SetConfig+0x27e>
 80042d8:	2308      	movs	r3, #8
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042de:	e006      	b.n	80042ee <UART_SetConfig+0x27e>
 80042e0:	2310      	movs	r3, #16
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e6:	e002      	b.n	80042ee <UART_SetConfig+0x27e>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a17      	ldr	r2, [pc, #92]	; (8004350 <UART_SetConfig+0x2e0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	f040 80a8 	bne.w	800444a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d834      	bhi.n	800436c <UART_SetConfig+0x2fc>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0x298>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800432d 	.word	0x0800432d
 800430c:	0800436d 	.word	0x0800436d
 8004310:	08004335 	.word	0x08004335
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800433b 	.word	0x0800433b
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	08004343 	.word	0x08004343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800432c:	f7fe fdc8 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8004330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004332:	e021      	b.n	8004378 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <UART_SetConfig+0x2f8>)
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004338:	e01e      	b.n	8004378 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433a:	f7fe fd53 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 800433e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004340:	e01a      	b.n	8004378 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004348:	e016      	b.n	8004378 <UART_SetConfig+0x308>
 800434a:	bf00      	nop
 800434c:	cfff69f3 	.word	0xcfff69f3
 8004350:	40008000 	.word	0x40008000
 8004354:	40013800 	.word	0x40013800
 8004358:	40021000 	.word	0x40021000
 800435c:	40004400 	.word	0x40004400
 8004360:	40004800 	.word	0x40004800
 8004364:	40004c00 	.word	0x40004c00
 8004368:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004376:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 812a 	beq.w	80045d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	4a9e      	ldr	r2, [pc, #632]	; (8004600 <UART_SetConfig+0x590>)
 8004386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800438a:	461a      	mov	r2, r3
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004392:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d305      	bcc.n	80043b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d903      	bls.n	80043b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043b6:	e10d      	b.n	80045d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	2200      	movs	r2, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	60fa      	str	r2, [r7, #12]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	4a8e      	ldr	r2, [pc, #568]	; (8004600 <UART_SetConfig+0x590>)
 80043c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2200      	movs	r2, #0
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043da:	f7fb ff79 	bl	80002d0 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	020b      	lsls	r3, r1, #8
 80043f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043f4:	0202      	lsls	r2, r0, #8
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	6849      	ldr	r1, [r1, #4]
 80043fa:	0849      	lsrs	r1, r1, #1
 80043fc:	2000      	movs	r0, #0
 80043fe:	460c      	mov	r4, r1
 8004400:	4605      	mov	r5, r0
 8004402:	eb12 0804 	adds.w	r8, r2, r4
 8004406:	eb43 0905 	adc.w	r9, r3, r5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	469a      	mov	sl, r3
 8004412:	4693      	mov	fp, r2
 8004414:	4652      	mov	r2, sl
 8004416:	465b      	mov	r3, fp
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	f7fb ff58 	bl	80002d0 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442e:	d308      	bcc.n	8004442 <UART_SetConfig+0x3d2>
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004436:	d204      	bcs.n	8004442 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e0c8      	b.n	80045d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004448:	e0c4      	b.n	80045d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004452:	d167      	bne.n	8004524 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004458:	2b08      	cmp	r3, #8
 800445a:	d828      	bhi.n	80044ae <UART_SetConfig+0x43e>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x3f4>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	080044af 	.word	0x080044af
 8004474:	0800449f 	.word	0x0800449f
 8004478:	080044af 	.word	0x080044af
 800447c:	080044af 	.word	0x080044af
 8004480:	080044af 	.word	0x080044af
 8004484:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7fe fd1a 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800448e:	e014      	b.n	80044ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7fe fd2c 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8004494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004496:	e010      	b.n	80044ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b5a      	ldr	r3, [pc, #360]	; (8004604 <UART_SetConfig+0x594>)
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800449c:	e00d      	b.n	80044ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7fe fca1 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044a4:	e009      	b.n	80044ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044ac:	e005      	b.n	80044ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8089 	beq.w	80045d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <UART_SetConfig+0x590>)
 80044c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d916      	bls.n	800451c <UART_SetConfig+0x4ac>
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d212      	bcs.n	800451c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f023 030f 	bic.w	r3, r3, #15
 80044fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b29a      	uxth	r2, r3
 800450c:	8bfb      	ldrh	r3, [r7, #30]
 800450e:	4313      	orrs	r3, r2
 8004510:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	8bfa      	ldrh	r2, [r7, #30]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	e05b      	b.n	80045d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004522:	e057      	b.n	80045d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004528:	2b08      	cmp	r3, #8
 800452a:	d828      	bhi.n	800457e <UART_SetConfig+0x50e>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x4c4>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe fcb2 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800455e:	e014      	b.n	800458a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fe fcc4 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8004564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004566:	e010      	b.n	800458a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b26      	ldr	r3, [pc, #152]	; (8004604 <UART_SetConfig+0x594>)
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800456c:	e00d      	b.n	800458a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fe fc39 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004574:	e009      	b.n	800458a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800457c:	e005      	b.n	800458a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004588:	bf00      	nop
    }

    if (pclk != 0U)
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d021      	beq.n	80045d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	4a1a      	ldr	r2, [pc, #104]	; (8004600 <UART_SetConfig+0x590>)
 8004596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459a:	461a      	mov	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	fbb3 f2f2 	udiv	r2, r3, r2
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	441a      	add	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d909      	bls.n	80045ce <UART_SetConfig+0x55e>
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d205      	bcs.n	80045ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
 80045cc:	e002      	b.n	80045d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2201      	movs	r2, #1
 80045e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3730      	adds	r7, #48	; 0x30
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fe:	bf00      	nop
 8004600:	08006144 	.word	0x08006144
 8004604:	00f42400 	.word	0x00f42400

08004608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d10a      	bne.n	800471e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af02      	add	r7, sp, #8
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800475c:	f7fd fb86 	bl	8001e6c <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10e      	bne.n	800478e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f82f 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e025      	b.n	80047da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b04      	cmp	r3, #4
 800479a:	d10e      	bne.n	80047ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f819 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b09c      	sub	sp, #112	; 0x70
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	e0a9      	b.n	8004948 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	f000 80a5 	beq.w	8004948 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fd fb35 	bl	8001e6c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <UART_WaitOnFlagUntilTimeout+0x32>
 800480e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004810:	2b00      	cmp	r3, #0
 8004812:	d140      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004828:	667b      	str	r3, [r7, #100]	; 0x64
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e6      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	663b      	str	r3, [r7, #96]	; 0x60
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004866:	64ba      	str	r2, [r7, #72]	; 0x48
 8004868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800486c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e069      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d051      	beq.n	8004948 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b2:	d149      	bne.n	8004948 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
 80048de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	66bb      	str	r3, [r7, #104]	; 0x68
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004910:	623a      	str	r2, [r7, #32]
 8004912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	69f9      	ldr	r1, [r7, #28]
 8004916:	6a3a      	ldr	r2, [r7, #32]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	61bb      	str	r3, [r7, #24]
   return(result);
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e010      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	429a      	cmp	r2, r3
 8004964:	f43f af46 	beq.w	80047f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3770      	adds	r7, #112	; 0x70
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_UARTEx_DisableFifoMode+0x16>
 8004984:	2302      	movs	r3, #2
 8004986:	e027      	b.n	80049d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	; 0x24
 8004994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e02d      	b.n	8004a58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	; 0x24
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f84f 	bl	8004adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e02d      	b.n	8004ad4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f811 	bl	8004adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d108      	bne.n	8004afe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004afc:	e031      	b.n	8004b62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004afe:	2308      	movs	r3, #8
 8004b00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b02:	2308      	movs	r3, #8
 8004b04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	0e5b      	lsrs	r3, r3, #25
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	0f5b      	lsrs	r3, r3, #29
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b26:	7bbb      	ldrb	r3, [r7, #14]
 8004b28:	7b3a      	ldrb	r2, [r7, #12]
 8004b2a:	4911      	ldr	r1, [pc, #68]	; (8004b70 <UARTEx_SetNbDataToProcess+0x94>)
 8004b2c:	5c8a      	ldrb	r2, [r1, r2]
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b32:	7b3a      	ldrb	r2, [r7, #12]
 8004b34:	490f      	ldr	r1, [pc, #60]	; (8004b74 <UARTEx_SetNbDataToProcess+0x98>)
 8004b36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b38:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	7b7a      	ldrb	r2, [r7, #13]
 8004b48:	4909      	ldr	r1, [pc, #36]	; (8004b70 <UARTEx_SetNbDataToProcess+0x94>)
 8004b4a:	5c8a      	ldrb	r2, [r1, r2]
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b50:	7b7a      	ldrb	r2, [r7, #13]
 8004b52:	4908      	ldr	r1, [pc, #32]	; (8004b74 <UARTEx_SetNbDataToProcess+0x98>)
 8004b54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b56:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	0800615c 	.word	0x0800615c
 8004b74:	08006164 	.word	0x08006164

08004b78 <_ZN9LoRaClassC1Ev>:
    #define ISR_PREFIX ICACHE_RAM_ATTR
#else
    #define ISR_PREFIX
#endif

LoRaClass::LoRaClass() :
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	_LORA_DIO0_Pin(),
	_frequency(0),
	_packetIndex(0),
	_implicitHeaderMode(0),
	_onReceive(NULL),
	_onTxDone(NULL)
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <_ZN9LoRaClassC1Ev+0x64>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	819a      	strh	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	829a      	strh	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	619a      	str	r2, [r3, #24]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	839a      	strh	r2, [r3, #28]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	621a      	str	r2, [r3, #32]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
{

}
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	08006174 	.word	0x08006174

08004be0 <_ZN9LoRaClass5beginEl>:

int LoRaClass::begin(long frequency)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  // set SS high
	HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_SET);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6898      	ldr	r0, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	899b      	ldrh	r3, [r3, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f7fd fbe5 	bl	80023c4 <HAL_GPIO_WritePin>

  // start SPI
//  _spi->begin();

  // check version
  uint8_t version = readRegister(REG_VERSION);
 8004bfa:	2142      	movs	r1, #66	; 0x42
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fd03 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b12      	cmp	r3, #18
 8004c0a:	d001      	beq.n	8004c10 <_ZN9LoRaClass5beginEl+0x30>
    return 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e02b      	b.n	8004c68 <_ZN9LoRaClass5beginEl+0x88>
  }

  // put in sleep mode
  sleep();
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9e7 	bl	8004fe4 <_ZN9LoRaClass5sleepEv>

  // set frequency
  setFrequency(frequency);
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa45 	bl	80050a8 <_ZN9LoRaClass12setFrequencyEl>

  // Enable AutoRestartRxMode
//  writeRegister(REG_SYNC_CONFIG, 0b0101011);

  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	210e      	movs	r1, #14
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fcb6 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	210f      	movs	r1, #15
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fcb1 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8004c32:	210c      	movs	r1, #12
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fce7 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f043 0303 	orr.w	r3, r3, #3
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	210c      	movs	r1, #12
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fca4 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	2126      	movs	r1, #38	; 0x26
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fc9f 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  // set output power to 17 dBm
  setTxPower(17);
 8004c56:	2201      	movs	r2, #1
 8004c58:	2111      	movs	r1, #17
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9cf 	bl	8004ffe <_ZN9LoRaClass10setTxPowerEii>

  // put in standby mode
  idle();
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9b2 	bl	8004fca <_ZN9LoRaClass4idleEv>

  return 1;
 8004c66:	2301      	movs	r3, #1
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZN9LoRaClass9setRxModeEb>:
  // stop SPI
//  _spi->end();
}

void LoRaClass::setRxMode(bool continuous)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
	if (continuous) {
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <_ZN9LoRaClass9setRxModeEb+0x1e>
		writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8004c82:	2285      	movs	r2, #133	; 0x85
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fc84 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
	} else {
		writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8004c8c:	e004      	b.n	8004c98 <_ZN9LoRaClass9setRxModeEb+0x28>
		writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8004c8e:	2286      	movs	r2, #134	; 0x86
 8004c90:	2101      	movs	r1, #1
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fc7e 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <_ZN9LoRaClass9setTxModeEv>:

void LoRaClass::setTxMode()
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8004ca8:	2283      	movs	r2, #131	; 0x83
 8004caa:	2101      	movs	r1, #1
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fc71 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <_ZN9LoRaClass11beginPacketEi>:


int LoRaClass::beginPacket(int implicitHeader)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  if (isTransmitting()) {
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f84c 	bl	8004d62 <_ZN9LoRaClass14isTransmittingEv>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <_ZN9LoRaClass11beginPacketEi+0x1a>
    return 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e017      	b.n	8004d04 <_ZN9LoRaClass11beginPacketEi+0x4a>
  }

  // put in standby mode
  idle();
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f978 	bl	8004fca <_ZN9LoRaClass4idleEv>

  if (implicitHeader) {
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <_ZN9LoRaClass11beginPacketEi+0x2e>
    implicitHeaderMode();
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fc26 	bl	8005532 <_ZN9LoRaClass18implicitHeaderModeEv>
 8004ce6:	e002      	b.n	8004cee <_ZN9LoRaClass11beginPacketEi+0x34>
  } else {
    explicitHeaderMode();
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fc0a 	bl	8005502 <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // reset FIFO address and payload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8004cee:	2200      	movs	r2, #0
 8004cf0:	210d      	movs	r1, #13
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fc4e 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2122      	movs	r1, #34	; 0x22
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fc49 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  return 1;
 8004d02:	2301      	movs	r3, #1
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_ZN9LoRaClass9endPacketEb>:

int LoRaClass::endPacket(bool async)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
	// put in TX mode
	setTxMode();
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ffc1 	bl	8004ca0 <_ZN9LoRaClass9setTxModeEv>

	// wait for TX done
	while (HAL_GPIO_ReadPin(RA01_DIO0_GPIO_Port, RA01_DIO0_Pin) == 1) {
 8004d1e:	2101      	movs	r1, #1
 8004d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d24:	f7fd fb36 	bl	8002394 <HAL_GPIO_ReadPin>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <_ZN9LoRaClass9endPacketEb+0x34>
		HAL_Delay(100);
 8004d38:	2064      	movs	r0, #100	; 0x64
 8004d3a:	f7fd f8a3 	bl	8001e84 <HAL_Delay>
	while (HAL_GPIO_ReadPin(RA01_DIO0_GPIO_Port, RA01_DIO0_Pin) == 1) {
 8004d3e:	e7ee      	b.n	8004d1e <_ZN9LoRaClass9endPacketEb+0x12>
	//      yield();
	}

    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8004d40:	2208      	movs	r2, #8
 8004d42:	2112      	movs	r1, #18
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fc25 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

    // Set to Standby
    HAL_Delay(1000);
 8004d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d4e:	f7fd f899 	bl	8001e84 <HAL_Delay>
    sleep();
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f946 	bl	8004fe4 <_ZN9LoRaClass5sleepEv>
//    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);

    return 1;
 8004d58:	2301      	movs	r3, #1
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_ZN9LoRaClass14isTransmittingEv>:

bool LoRaClass::isTransmitting()
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fc4b 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <_ZN9LoRaClass14isTransmittingEv+0x28>
    return true;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e013      	b.n	8004db2 <_ZN9LoRaClass14isTransmittingEv+0x50>
  }

  if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 8004d8a:	2112      	movs	r1, #18
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fc3b 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <_ZN9LoRaClass14isTransmittingEv+0x4e>
    // clear IRQ's
    writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8004da6:	2208      	movs	r2, #8
 8004da8:	2112      	movs	r1, #18
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fbf2 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  }

  return false;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_ZN9LoRaClass11parsePacketEi>:

int LoRaClass::parsePacket(int size)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
//  HAL_Delay(1000);
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8004dc8:	2112      	movs	r1, #18
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fc1c 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	60bb      	str	r3, [r7, #8]

  if (size > 0) {
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	dd0a      	ble.n	8004df0 <_ZN9LoRaClass11parsePacketEi+0x36>
    implicitHeaderMode();
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fba9 	bl	8005532 <_ZN9LoRaClass18implicitHeaderModeEv>

    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	2122      	movs	r1, #34	; 0x22
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fbd3 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
 8004dee:	e002      	b.n	8004df6 <_ZN9LoRaClass11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb86 	bl	8005502 <_ZN9LoRaClass18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	2112      	movs	r1, #18
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fbc8 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d022      	beq.n	8004e54 <_ZN9LoRaClass11parsePacketEi+0x9a>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11d      	bne.n	8004e54 <_ZN9LoRaClass11parsePacketEi+0x9a>
    // received a packet
    _packetIndex = 0;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

    // read packet length
    if (_implicitHeaderMode) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <_ZN9LoRaClass11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8004e26:	2122      	movs	r1, #34	; 0x22
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fbed 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e005      	b.n	8004e40 <_ZN9LoRaClass11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8004e34:	2113      	movs	r1, #19
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fbe6 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	60fb      	str	r3, [r7, #12]
    }

    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8004e40:	2110      	movs	r1, #16
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fbe0 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	210d      	movs	r1, #13
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fba0 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
//
//    // put in single RX mode
//    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
//  }

  return packetLength;
 8004e54:	68fb      	ldr	r3, [r7, #12]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <_ZN9LoRaClass5writeEh>:
{
  return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
}

size_t LoRaClass::write(uint8_t byte)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1cf9      	adds	r1, r7, #3
 8004e74:	2201      	movs	r2, #1
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
 8004e7a:	4603      	mov	r3, r0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_ZN9LoRaClass5writeEPKhj>:

size_t LoRaClass::write(const uint8_t *buffer, size_t size)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8004e90:	2122      	movs	r1, #34	; 0x22
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fbb8 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	613b      	str	r3, [r7, #16]

  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	2bff      	cmp	r3, #255	; 0xff
 8004ea4:	d903      	bls.n	8004eae <_ZN9LoRaClass5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004eac:	607b      	str	r3, [r7, #4]
  }

  // write data
  for (size_t i = 0; i < size; i++) {
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20c      	bcs.n	8004ed4 <_ZN9LoRaClass5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fb64 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e7ee      	b.n	8004eb2 <_ZN9LoRaClass5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2122      	movs	r1, #34	; 0x22
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fb55 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  return size;
 8004eea:	687b      	ldr	r3, [r7, #4]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <_ZN9LoRaClass9availableEv>:

int LoRaClass::available()
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8004efc:	2113      	movs	r1, #19
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fb82 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <_ZN9LoRaClass4readEv>:

int LoRaClass::read()
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <_ZN9LoRaClass4readEv+0x2a>
    return -1;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	e009      	b.n	8004f54 <_ZN9LoRaClass4readEv+0x3e>
  }

  _packetIndex++;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

  return readRegister(REG_FIFO);
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb5b 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004f52:	4603      	mov	r3, r0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZN9LoRaClass4peekEv>:

int LoRaClass::peek()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <_ZN9LoRaClass4peekEv+0x2a>
    return -1;
 8004f80:	f04f 33ff 	mov.w	r3, #4294967295
 8004f84:	e013      	b.n	8004fae <_ZN9LoRaClass4peekEv+0x52>
  }

  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8004f86:	210d      	movs	r1, #13
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb3d 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	60fb      	str	r3, [r7, #12]

  // read
  uint8_t b = readRegister(REG_FIFO);
 8004f92:	2100      	movs	r1, #0
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb37 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	72fb      	strb	r3, [r7, #11]

  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	210d      	movs	r1, #13
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 faf4 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>

  return b;
 8004fac:	7afb      	ldrb	r3, [r7, #11]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <_ZN9LoRaClass5flushEv>:

void LoRaClass::flush()
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <_ZN9LoRaClass4idleEv>:

void LoRaClass::idle()
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8004fd2:	2281      	movs	r2, #129	; 0x81
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fadc 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZN9LoRaClass5sleepEv>:

void LoRaClass::sleep()
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	2101      	movs	r1, #1
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 facf 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <_ZN9LoRaClass10setTxPowerEii>:

void LoRaClass::setTxPower(int level, int outputPin)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d116      	bne.n	800503e <_ZN9LoRaClass10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	da02      	bge.n	800501c <_ZN9LoRaClass10setTxPowerEii+0x1e>
      level = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	e004      	b.n	8005026 <_ZN9LoRaClass10setTxPowerEii+0x28>
    } else if (level > 14) {
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b0e      	cmp	r3, #14
 8005020:	dd01      	ble.n	8005026 <_ZN9LoRaClass10setTxPowerEii+0x28>
      level = 14;
 8005022:	230e      	movs	r3, #14
 8005024:	60bb      	str	r3, [r7, #8]
    }

    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	b25b      	sxtb	r3, r3
 800502a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800502e:	b25b      	sxtb	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	2109      	movs	r1, #9
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 faac 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
    }

    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 800503c:	e030      	b.n	80050a0 <_ZN9LoRaClass10setTxPowerEii+0xa2>
    if (level > 17) {
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b11      	cmp	r3, #17
 8005042:	dd11      	ble.n	8005068 <_ZN9LoRaClass10setTxPowerEii+0x6a>
      if (level > 20) {
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b14      	cmp	r3, #20
 8005048:	dd01      	ble.n	800504e <_ZN9LoRaClass10setTxPowerEii+0x50>
        level = 20;
 800504a:	2314      	movs	r3, #20
 800504c:	60bb      	str	r3, [r7, #8]
      level -= 3;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3b03      	subs	r3, #3
 8005052:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x87);
 8005054:	2287      	movs	r2, #135	; 0x87
 8005056:	214d      	movs	r1, #77	; 0x4d
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fa9b 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(140);
 800505e:	218c      	movs	r1, #140	; 0x8c
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f9e5 	bl	8005430 <_ZN9LoRaClass6setOCPEh>
 8005066:	e00d      	b.n	8005084 <_ZN9LoRaClass10setTxPowerEii+0x86>
      if (level < 2) {
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b01      	cmp	r3, #1
 800506c:	dc01      	bgt.n	8005072 <_ZN9LoRaClass10setTxPowerEii+0x74>
        level = 2;
 800506e:	2302      	movs	r3, #2
 8005070:	60bb      	str	r3, [r7, #8]
      writeRegister(REG_PA_DAC, 0x84);
 8005072:	2284      	movs	r2, #132	; 0x84
 8005074:	214d      	movs	r1, #77	; 0x4d
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fa8c 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
      setOCP(100);
 800507c:	2164      	movs	r1, #100	; 0x64
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f9d6 	bl	8005430 <_ZN9LoRaClass6setOCPEh>
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	3b02      	subs	r3, #2
 800508a:	b2db      	uxtb	r3, r3
 800508c:	b25b      	sxtb	r3, r3
 800508e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005092:	b25b      	sxtb	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	2109      	movs	r1, #9
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 fa7a 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_ZN9LoRaClass12setFrequencyEl>:


void LoRaClass::setFrequency(long frequency)
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	6838      	ldr	r0, [r7, #0]
 80050b6:	6208      	str	r0, [r1, #32]

  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	17c8      	asrs	r0, r1, #31
 80050bc:	460a      	mov	r2, r1
 80050be:	4603      	mov	r3, r0
 80050c0:	1355      	asrs	r5, r2, #13
 80050c2:	04d4      	lsls	r4, r2, #19
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <_ZN9LoRaClass12setFrequencyEl+0x88>)
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb f8ff 	bl	80002d0 <__aeabi_uldivmod>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	e9c7 2302 	strd	r2, r3, [r7, #8]

  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80050da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	0c02      	lsrs	r2, r0, #16
 80050e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050ec:	0c0b      	lsrs	r3, r1, #16
 80050ee:	b2d3      	uxtb	r3, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	2106      	movs	r1, #6
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fa4d 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80050fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	0a02      	lsrs	r2, r0, #8
 8005108:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800510c:	0a0b      	lsrs	r3, r1, #8
 800510e:	b2d3      	uxtb	r3, r2
 8005110:	461a      	mov	r2, r3
 8005112:	2107      	movs	r1, #7
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fa3d 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800511a:	7a3b      	ldrb	r3, [r7, #8]
 800511c:	461a      	mov	r2, r3
 800511e:	2108      	movs	r1, #8
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa37 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bdb0      	pop	{r4, r5, r7, pc}
 800512e:	bf00      	nop
 8005130:	01e84800 	.word	0x01e84800

08005134 <_ZN9LoRaClass14setDioMappingsEv>:

void LoRaClass::setDioMappings()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
//	0b10010000
	writeRegister(REG_DIO_MAPPING_1, 0b00000000);
 800513c:	2200      	movs	r2, #0
 800513e:	2140      	movs	r1, #64	; 0x40
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fa27 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZN9LoRaClass18getSpreadingFactorEv>:

int LoRaClass::getSpreadingFactor()
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  return readRegister(REG_MODEM_CONFIG_2) >> 4;
 8005156:	211e      	movs	r1, #30
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa55 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 800515e:	4603      	mov	r3, r0
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	b2db      	uxtb	r3, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN9LoRaClass18setSpreadingFactorEi>:

void LoRaClass::setSpreadingFactor(int sf)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b05      	cmp	r3, #5
 800517a:	dc02      	bgt.n	8005182 <_ZN9LoRaClass18setSpreadingFactorEi+0x16>
    sf = 6;
 800517c:	2306      	movs	r3, #6
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	e004      	b.n	800518c <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b0c      	cmp	r3, #12
 8005186:	dd01      	ble.n	800518c <_ZN9LoRaClass18setSpreadingFactorEi+0x20>
    sf = 12;
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b06      	cmp	r3, #6
 8005190:	d10a      	bne.n	80051a8 <_ZN9LoRaClass18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8005192:	22c5      	movs	r2, #197	; 0xc5
 8005194:	2131      	movs	r1, #49	; 0x31
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9fc 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 800519c:	220c      	movs	r2, #12
 800519e:	2137      	movs	r1, #55	; 0x37
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f9f7 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
 80051a6:	e009      	b.n	80051bc <_ZN9LoRaClass18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80051a8:	22c3      	movs	r2, #195	; 0xc3
 80051aa:	2131      	movs	r1, #49	; 0x31
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f9f1 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80051b2:	220a      	movs	r2, #10
 80051b4:	2137      	movs	r1, #55	; 0x37
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9ec 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  }

  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80051bc:	211e      	movs	r1, #30
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa22 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 80051c4:	4603      	mov	r3, r0
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	b25a      	sxtb	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	b25b      	sxtb	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	211e      	movs	r1, #30
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9d8 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8bf 	bl	8005368 <_ZN9LoRaClass10setLdoFlagEv>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <_ZN9LoRaClass18getSignalBandwidthEv>:

long LoRaClass::getSignalBandwidth()
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint8_t bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
 80051fc:	211d      	movs	r1, #29
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa02 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8005204:	4603      	mov	r3, r0
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	73fb      	strb	r3, [r7, #15]

  switch (bw) {
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b09      	cmp	r3, #9
 800520e:	d832      	bhi.n	8005276 <_ZN9LoRaClass18getSignalBandwidthEv+0x82>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <_ZN9LoRaClass18getSignalBandwidthEv+0x24>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005241 	.word	0x08005241
 800521c:	08005247 	.word	0x08005247
 8005220:	0800524d 	.word	0x0800524d
 8005224:	08005253 	.word	0x08005253
 8005228:	08005259 	.word	0x08005259
 800522c:	0800525f 	.word	0x0800525f
 8005230:	08005265 	.word	0x08005265
 8005234:	0800526b 	.word	0x0800526b
 8005238:	0800526f 	.word	0x0800526f
 800523c:	08005273 	.word	0x08005273
    case 0: return 7.8E3;
 8005240:	f641 6378 	movw	r3, #7800	; 0x1e78
 8005244:	e019      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 1: return 10.4E3;
 8005246:	f642 03a0 	movw	r3, #10400	; 0x28a0
 800524a:	e016      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 2: return 15.6E3;
 800524c:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 8005250:	e013      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 3: return 20.8E3;
 8005252:	f245 1340 	movw	r3, #20800	; 0x5140
 8005256:	e010      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 4: return 31.25E3;
 8005258:	f647 2312 	movw	r3, #31250	; 0x7a12
 800525c:	e00d      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 5: return 41.7E3;
 800525e:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 8005262:	e00a      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 6: return 62.5E3;
 8005264:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005268:	e007      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 7: return 125E3;
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <_ZN9LoRaClass18getSignalBandwidthEv+0x90>)
 800526c:	e005      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 8: return 250E3;
 800526e:	4b06      	ldr	r3, [pc, #24]	; (8005288 <_ZN9LoRaClass18getSignalBandwidthEv+0x94>)
 8005270:	e003      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
    case 9: return 500E3;
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <_ZN9LoRaClass18getSignalBandwidthEv+0x98>)
 8005274:	e001      	b.n	800527a <_ZN9LoRaClass18getSignalBandwidthEv+0x86>
  }

  return -1;
 8005276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	0001e848 	.word	0x0001e848
 8005288:	0003d090 	.word	0x0003d090
 800528c:	0007a120 	.word	0x0007a120

08005290 <_ZN9LoRaClass18setSignalBandwidthEl>:

void LoRaClass::setSignalBandwidth(long sbw)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  int bw;

  if (sbw <= 7.8E3) {
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f641 6278 	movw	r2, #7800	; 0x1e78
 80052a0:	4293      	cmp	r3, r2
 80052a2:	dc02      	bgt.n	80052aa <_ZN9LoRaClass18setSignalBandwidthEl+0x1a>
    bw = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e03f      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	dc02      	bgt.n	80052ba <_ZN9LoRaClass18setSignalBandwidthEl+0x2a>
    bw = 1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e037      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	dc02      	bgt.n	80052ca <_ZN9LoRaClass18setSignalBandwidthEl+0x3a>
    bw = 2;
 80052c4:	2302      	movs	r3, #2
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e02f      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f245 1240 	movw	r2, #20800	; 0x5140
 80052d0:	4293      	cmp	r3, r2
 80052d2:	dc02      	bgt.n	80052da <_ZN9LoRaClass18setSignalBandwidthEl+0x4a>
    bw = 3;
 80052d4:	2303      	movs	r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e027      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f647 2212 	movw	r2, #31250	; 0x7a12
 80052e0:	4293      	cmp	r3, r2
 80052e2:	dc02      	bgt.n	80052ea <_ZN9LoRaClass18setSignalBandwidthEl+0x5a>
    bw = 4;
 80052e4:	2304      	movs	r3, #4
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e01f      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80052f0:	4293      	cmp	r3, r2
 80052f2:	dc02      	bgt.n	80052fa <_ZN9LoRaClass18setSignalBandwidthEl+0x6a>
    bw = 5;
 80052f4:	2305      	movs	r3, #5
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e017      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005300:	4293      	cmp	r3, r2
 8005302:	dc02      	bgt.n	800530a <_ZN9LoRaClass18setSignalBandwidthEl+0x7a>
    bw = 6;
 8005304:	2306      	movs	r3, #6
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e00f      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	4a14      	ldr	r2, [pc, #80]	; (8005360 <_ZN9LoRaClass18setSignalBandwidthEl+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	dc02      	bgt.n	8005318 <_ZN9LoRaClass18setSignalBandwidthEl+0x88>
    bw = 7;
 8005312:	2307      	movs	r3, #7
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e008      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	4a12      	ldr	r2, [pc, #72]	; (8005364 <_ZN9LoRaClass18setSignalBandwidthEl+0xd4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	dc02      	bgt.n	8005326 <_ZN9LoRaClass18setSignalBandwidthEl+0x96>
    bw = 8;
 8005320:	2308      	movs	r3, #8
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e001      	b.n	800532a <_ZN9LoRaClass18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8005326:	2309      	movs	r3, #9
 8005328:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 800532a:	211d      	movs	r1, #29
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f96b 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8005332:	4603      	mov	r3, r0
 8005334:	b25b      	sxtb	r3, r3
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	b25a      	sxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	b25b      	sxtb	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b25b      	sxtb	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	211d      	movs	r1, #29
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f921 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
  setLdoFlag();
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f808 	bl	8005368 <_ZN9LoRaClass10setLdoFlagEv>
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	0001e848 	.word	0x0001e848
 8005364:	0003d090 	.word	0x0003d090

08005368 <_ZN9LoRaClass10setLdoFlagEv>:

void LoRaClass::setLdoFlag()
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  // Section 4.1.1.5
  long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ff3f 	bl	80051f4 <_ZN9LoRaClass18getSignalBandwidthEv>
 8005376:	4604      	mov	r4, r0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fee8 	bl	800514e <_ZN9LoRaClass18getSpreadingFactorEv>
 800537e:	4603      	mov	r3, r0
 8005380:	2201      	movs	r2, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	fb94 f3f3 	sdiv	r3, r4, r3
 800538a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800538e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005392:	613b      	str	r3, [r7, #16]

  // Section 4.1.1.6
  bool ldoOn = symbolDuration > 16;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b10      	cmp	r3, #16
 8005398:	bfcc      	ite	gt
 800539a:	2301      	movgt	r3, #1
 800539c:	2300      	movle	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]

  uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
 80053a0:	2126      	movs	r1, #38	; 0x26
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f930 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]
  if (ldoOn) {
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <_ZN9LoRaClass10setLdoFlagEv+0x54>
  	config3 |= (1 << 3);
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	f043 0308 	orr.w	r3, r3, #8
 80053b8:	75fb      	strb	r3, [r7, #23]
 80053ba:	e003      	b.n	80053c4 <_ZN9LoRaClass10setLdoFlagEv+0x5c>
    } else {
  	config3 &= ~(1 << 3);
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	f023 0308 	bic.w	r3, r3, #8
 80053c2:	75fb      	strb	r3, [r7, #23]
    }
  writeRegister(REG_MODEM_CONFIG_3, config3);
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	461a      	mov	r2, r3
 80053c8:	2126      	movs	r1, #38	; 0x26
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8e2 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd90      	pop	{r4, r7, pc}

080053d8 <_ZN9LoRaClass14setCodingRate4Ei>:

void LoRaClass::setCodingRate4(int denominator)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	dc02      	bgt.n	80053ee <_ZN9LoRaClass14setCodingRate4Ei+0x16>
    denominator = 5;
 80053e8:	2305      	movs	r3, #5
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	e004      	b.n	80053f8 <_ZN9LoRaClass14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	dd01      	ble.n	80053f8 <_ZN9LoRaClass14setCodingRate4Ei+0x20>
    denominator = 8;
 80053f4:	2308      	movs	r3, #8
 80053f6:	603b      	str	r3, [r7, #0]
  }

  int cr = denominator - 4;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	3b04      	subs	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 80053fe:	211d      	movs	r1, #29
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f901 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8005406:	4603      	mov	r3, r0
 8005408:	b25b      	sxtb	r3, r3
 800540a:	f023 030e 	bic.w	r3, r3, #14
 800540e:	b25a      	sxtb	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	b25b      	sxtb	r3, r3
 8005416:	4313      	orrs	r3, r2
 8005418:	b25b      	sxtb	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	211d      	movs	r1, #29
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8b7 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <_ZN9LoRaClass6setOCPEh>:
  writeRegister(REG_INVERTIQ,  0x27);
  writeRegister(REG_INVERTIQ2, 0x1d);
}

void LoRaClass::setOCP(uint8_t mA)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 800543c:	231b      	movs	r3, #27
 800543e:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b78      	cmp	r3, #120	; 0x78
 8005444:	d809      	bhi.n	800545a <_ZN9LoRaClass6setOCPEh+0x2a>
    ocpTrim = (mA - 45) / 5;
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	3b2d      	subs	r3, #45	; 0x2d
 800544a:	4a12      	ldr	r2, [pc, #72]	; (8005494 <_ZN9LoRaClass6setOCPEh+0x64>)
 800544c:	fb82 1203 	smull	r1, r2, r2, r3
 8005450:	1052      	asrs	r2, r2, #1
 8005452:	17db      	asrs	r3, r3, #31
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	73fb      	strb	r3, [r7, #15]
 8005458:	e00b      	b.n	8005472 <_ZN9LoRaClass6setOCPEh+0x42>
  } else if (mA <=240) {
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	2bf0      	cmp	r3, #240	; 0xf0
 800545e:	d808      	bhi.n	8005472 <_ZN9LoRaClass6setOCPEh+0x42>
    ocpTrim = (mA + 30) / 10;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	331e      	adds	r3, #30
 8005464:	4a0b      	ldr	r2, [pc, #44]	; (8005494 <_ZN9LoRaClass6setOCPEh+0x64>)
 8005466:	fb82 1203 	smull	r1, r2, r2, r3
 800546a:	1092      	asrs	r2, r2, #2
 800546c:	17db      	asrs	r3, r3, #31
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	73fb      	strb	r3, [r7, #15]
  }

  writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f043 0320 	orr.w	r3, r3, #32
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	210b      	movs	r1, #11
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f885 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	66666667 	.word	0x66666667

08005498 <_ZN9LoRaClass6setDIOEP12GPIO_TypeDeft>:
//  _reset = reset;
//  _dio0 = dio0;
//}

void LoRaClass::setDIO(GPIO_TypeDef *LORA_DIO0_GPIO_Port, uint16_t LORA_DIO0_Pin)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
	_LORA_DIO0_GPIO_Port = LORA_DIO0_GPIO_Port;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	619a      	str	r2, [r3, #24]
	_LORA_DIO0_Pin = LORA_DIO0_Pin;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	839a      	strh	r2, [r3, #28]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <_ZN9LoRaClass6setSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:


void LoRaClass::setSPI(SPI_HandleTypeDef *spi, GPIO_TypeDef *LORA_CS_GPIO_Port, uint16_t LORA_CS_Pin, GPIO_TypeDef *LORA_BUSY_GPIO_Port, uint16_t LORA_BUSY_Pin)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	807b      	strh	r3, [r7, #2]
	_spi = spi;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	605a      	str	r2, [r3, #4]
	_LORA_CS_GPIO_Port = LORA_CS_GPIO_Port;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]
	_LORA_CS_Pin = LORA_CS_Pin;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_SET);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6898      	ldr	r0, [r3, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	899b      	ldrh	r3, [r3, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	4619      	mov	r1, r3
 80054ea:	f7fc ff6b 	bl	80023c4 <HAL_GPIO_WritePin>
	_LORA_BUSY_GPIO_Port = LORA_BUSY_GPIO_Port;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	611a      	str	r2, [r3, #16]
	_LORA_BUSY_Pin = LORA_BUSY_Pin;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8bba      	ldrh	r2, [r7, #28]
 80054f8:	829a      	strh	r2, [r3, #20]
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZN9LoRaClass18explicitHeaderModeEv>:

void LoRaClass::explicitHeaderMode()
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005510:	211d      	movs	r1, #29
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f878 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8005518:	4603      	mov	r3, r0
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	211d      	movs	r1, #29
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f835 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_ZN9LoRaClass18implicitHeaderModeEv>:

void LoRaClass::implicitHeaderMode()
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	629a      	str	r2, [r3, #40]	; 0x28

  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005540:	211d      	movs	r1, #29
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f860 	bl	8005608 <_ZN9LoRaClass12readRegisterEh>
 8005548:	4603      	mov	r3, r0
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	211d      	movs	r1, #29
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f81d 	bl	8005594 <_ZN9LoRaClass13writeRegisterEhh>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <_ZN9LoRaClass13checkBusyLineEv>:
  LoRa.handleDio0Rise();
}

LoRaClass LoRa;

void LoRaClass::checkBusyLine() {
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
	uint8_t val = HAL_GPIO_ReadPin(_LORA_BUSY_GPIO_Port, _LORA_BUSY_Pin);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8a9b      	ldrh	r3, [r3, #20]
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7fc ff0d 	bl	8002394 <HAL_GPIO_ReadPin>
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]
    while (val == 1) {
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d103      	bne.n	800558c <_ZN9LoRaClass13checkBusyLineEv+0x2a>
    	HAL_Delay(10);
 8005584:	200a      	movs	r0, #10
 8005586:	f7fc fc7d 	bl	8001e84 <HAL_Delay>
    while (val == 1) {
 800558a:	e7f8      	b.n	800557e <_ZN9LoRaClass13checkBusyLineEv+0x1c>
    }
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZN9LoRaClass13writeRegisterEhh>:

void LoRaClass::writeRegister(uint8_t address, uint8_t value) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
 80055a0:	4613      	mov	r3, r2
 80055a2:	70bb      	strb	r3, [r7, #2]
    // bitwise operation sets the write bit in the address for the LoRa device.
    address = address | 0x80;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055aa:	70fb      	strb	r3, [r7, #3]
    uint8_t spiBuf[2] = {address, value};
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	753b      	strb	r3, [r7, #20]
 80055b0:	78bb      	ldrb	r3, [r7, #2]
 80055b2:	757b      	strb	r3, [r7, #21]
    uint8_t rxData[5] = {0,0,0,0,0};
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <_ZN9LoRaClass13writeRegisterEhh+0x70>)
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055be:	6018      	str	r0, [r3, #0]
 80055c0:	3304      	adds	r3, #4
 80055c2:	7019      	strb	r1, [r3, #0]

    checkBusyLine();
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff ffcc 	bl	8005562 <_ZN9LoRaClass13checkBusyLineEv>

    HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_RESET);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6898      	ldr	r0, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	899b      	ldrh	r3, [r3, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7fc fef5 	bl	80023c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t*)&spiBuf, 2, 100);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6858      	ldr	r0, [r3, #4]
 80055de:	f107 0114 	add.w	r1, r7, #20
 80055e2:	2364      	movs	r3, #100	; 0x64
 80055e4:	2202      	movs	r2, #2
 80055e6:	f7fd ff78 	bl	80034da <HAL_SPI_Transmit>
//	HAL_SPI_Receive(_spi, (uint8_t*)rxData, 1, 100);
	HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_SET);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6898      	ldr	r0, [r3, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	899b      	ldrh	r3, [r3, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fc fee5 	bl	80023c4 <HAL_GPIO_WritePin>
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	08006124 	.word	0x08006124

08005608 <_ZN9LoRaClass12readRegisterEh>:
	HAL_SPI_Transmit(_spi, (uint8_t*)&spiBuf, spiBufLen, 100);
//	HAL_SPI_Receive(_spi, (uint8_t*)rxData, 1, 100);
	HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_SET);
}

uint8_t LoRaClass::readRegister(uint8_t address) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
	// TODO it seems to work if I have a debug break point here before 0x12 is gathered... time issue? add a delay?
	address = address & 0x7f;
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561a:	b2db      	uxtb	r3, r3
 800561c:	70fb      	strb	r3, [r7, #3]
    uint8_t rxData[5] = {0,0,0,0,0};
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <_ZN9LoRaClass12readRegisterEh+0x78>)
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005628:	6018      	str	r0, [r3, #0]
 800562a:	3304      	adds	r3, #4
 800562c:	7019      	strb	r1, [r3, #0]

    checkBusyLine();
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ff97 	bl	8005562 <_ZN9LoRaClass13checkBusyLineEv>

    HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_RESET);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6898      	ldr	r0, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	899b      	ldrh	r3, [r3, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	4619      	mov	r1, r3
 8005640:	f7fc fec0 	bl	80023c4 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef hal_status = HAL_SPI_TransmitReceive(_spi, (uint8_t*)&address, (uint8_t*)rxData, 2, 100);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6858      	ldr	r0, [r3, #4]
 8005648:	f107 0208 	add.w	r2, r7, #8
 800564c:	1cf9      	adds	r1, r7, #3
 800564e:	2364      	movs	r3, #100	; 0x64
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	2302      	movs	r3, #2
 8005654:	f7fe f8af 	bl	80037b6 <HAL_SPI_TransmitReceive>
 8005658:	4603      	mov	r3, r0
 800565a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_LORA_CS_GPIO_Port, _LORA_CS_Pin, GPIO_PIN_SET);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6898      	ldr	r0, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	899b      	ldrh	r3, [r3, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	4619      	mov	r1, r3
 8005668:	f7fc feac 	bl	80023c4 <HAL_GPIO_WritePin>
    if (hal_status == HAL_OK)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <_ZN9LoRaClass12readRegisterEh+0x6e>
    {
        return rxData[1];    // response is in the second byte
 8005672:	7a7b      	ldrb	r3, [r7, #9]
 8005674:	e000      	b.n	8005678 <_ZN9LoRaClass12readRegisterEh+0x70>
    }
    return 0;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08006124 	.word	0x08006124

08005684 <_Z41__static_initialization_and_destruction_0ii>:
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800569a:	4293      	cmp	r3, r2
 800569c:	d102      	bne.n	80056a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
LoRaClass LoRa;
 800569e:	4803      	ldr	r0, [pc, #12]	; (80056ac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80056a0:	f7ff fa6a 	bl	8004b78 <_ZN9LoRaClassC1Ev>
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200001ac 	.word	0x200001ac

080056b0 <_GLOBAL__sub_I__ZN9LoRaClassC2Ev>:
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80056b8:	2001      	movs	r0, #1
 80056ba:	f7ff ffe3 	bl	8005684 <_Z41__static_initialization_and_destruction_0ii>
 80056be:	bd80      	pop	{r7, pc}

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	2000000c 	.word	0x2000000c

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4d0d      	ldr	r5, [pc, #52]	; (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2600      	movs	r6, #0
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4d0b      	ldr	r5, [pc, #44]	; (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	; (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 fcda 	bl	8006098 <_init>
 80056e4:	1b64      	subs	r4, r4, r5
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2600      	movs	r6, #0
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	080062e8 	.word	0x080062e8
 8005708:	080062e8 	.word	0x080062e8
 800570c:	080062e8 	.word	0x080062e8
 8005710:	080062f0 	.word	0x080062f0

08005714 <memset>:
 8005714:	4402      	add	r2, r0
 8005716:	4603      	mov	r3, r0
 8005718:	4293      	cmp	r3, r2
 800571a:	d100      	bne.n	800571e <memset+0xa>
 800571c:	4770      	bx	lr
 800571e:	f803 1b01 	strb.w	r1, [r3], #1
 8005722:	e7f9      	b.n	8005718 <memset+0x4>

08005724 <siprintf>:
 8005724:	b40e      	push	{r1, r2, r3}
 8005726:	b500      	push	{lr}
 8005728:	b09c      	sub	sp, #112	; 0x70
 800572a:	ab1d      	add	r3, sp, #116	; 0x74
 800572c:	9002      	str	r0, [sp, #8]
 800572e:	9006      	str	r0, [sp, #24]
 8005730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005734:	4809      	ldr	r0, [pc, #36]	; (800575c <siprintf+0x38>)
 8005736:	9107      	str	r1, [sp, #28]
 8005738:	9104      	str	r1, [sp, #16]
 800573a:	4909      	ldr	r1, [pc, #36]	; (8005760 <siprintf+0x3c>)
 800573c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005740:	9105      	str	r1, [sp, #20]
 8005742:	6800      	ldr	r0, [r0, #0]
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	a902      	add	r1, sp, #8
 8005748:	f000 f868 	bl	800581c <_svfiprintf_r>
 800574c:	9b02      	ldr	r3, [sp, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	b01c      	add	sp, #112	; 0x70
 8005754:	f85d eb04 	ldr.w	lr, [sp], #4
 8005758:	b003      	add	sp, #12
 800575a:	4770      	bx	lr
 800575c:	2000000c 	.word	0x2000000c
 8005760:	ffff0208 	.word	0xffff0208

08005764 <__ssputs_r>:
 8005764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	688e      	ldr	r6, [r1, #8]
 800576a:	429e      	cmp	r6, r3
 800576c:	4682      	mov	sl, r0
 800576e:	460c      	mov	r4, r1
 8005770:	4690      	mov	r8, r2
 8005772:	461f      	mov	r7, r3
 8005774:	d838      	bhi.n	80057e8 <__ssputs_r+0x84>
 8005776:	898a      	ldrh	r2, [r1, #12]
 8005778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800577c:	d032      	beq.n	80057e4 <__ssputs_r+0x80>
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	6909      	ldr	r1, [r1, #16]
 8005782:	eba5 0901 	sub.w	r9, r5, r1
 8005786:	6965      	ldr	r5, [r4, #20]
 8005788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800578c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005790:	3301      	adds	r3, #1
 8005792:	444b      	add	r3, r9
 8005794:	106d      	asrs	r5, r5, #1
 8005796:	429d      	cmp	r5, r3
 8005798:	bf38      	it	cc
 800579a:	461d      	movcc	r5, r3
 800579c:	0553      	lsls	r3, r2, #21
 800579e:	d531      	bpl.n	8005804 <__ssputs_r+0xa0>
 80057a0:	4629      	mov	r1, r5
 80057a2:	f000 fb63 	bl	8005e6c <_malloc_r>
 80057a6:	4606      	mov	r6, r0
 80057a8:	b950      	cbnz	r0, 80057c0 <__ssputs_r+0x5c>
 80057aa:	230c      	movs	r3, #12
 80057ac:	f8ca 3000 	str.w	r3, [sl]
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b6:	81a3      	strh	r3, [r4, #12]
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c0:	6921      	ldr	r1, [r4, #16]
 80057c2:	464a      	mov	r2, r9
 80057c4:	f000 fabe 	bl	8005d44 <memcpy>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	6126      	str	r6, [r4, #16]
 80057d6:	6165      	str	r5, [r4, #20]
 80057d8:	444e      	add	r6, r9
 80057da:	eba5 0509 	sub.w	r5, r5, r9
 80057de:	6026      	str	r6, [r4, #0]
 80057e0:	60a5      	str	r5, [r4, #8]
 80057e2:	463e      	mov	r6, r7
 80057e4:	42be      	cmp	r6, r7
 80057e6:	d900      	bls.n	80057ea <__ssputs_r+0x86>
 80057e8:	463e      	mov	r6, r7
 80057ea:	6820      	ldr	r0, [r4, #0]
 80057ec:	4632      	mov	r2, r6
 80057ee:	4641      	mov	r1, r8
 80057f0:	f000 fab6 	bl	8005d60 <memmove>
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	1b9b      	subs	r3, r3, r6
 80057f8:	60a3      	str	r3, [r4, #8]
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	4433      	add	r3, r6
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	2000      	movs	r0, #0
 8005802:	e7db      	b.n	80057bc <__ssputs_r+0x58>
 8005804:	462a      	mov	r2, r5
 8005806:	f000 fba5 	bl	8005f54 <_realloc_r>
 800580a:	4606      	mov	r6, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	d1e1      	bne.n	80057d4 <__ssputs_r+0x70>
 8005810:	6921      	ldr	r1, [r4, #16]
 8005812:	4650      	mov	r0, sl
 8005814:	f000 fabe 	bl	8005d94 <_free_r>
 8005818:	e7c7      	b.n	80057aa <__ssputs_r+0x46>
	...

0800581c <_svfiprintf_r>:
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	4698      	mov	r8, r3
 8005822:	898b      	ldrh	r3, [r1, #12]
 8005824:	061b      	lsls	r3, r3, #24
 8005826:	b09d      	sub	sp, #116	; 0x74
 8005828:	4607      	mov	r7, r0
 800582a:	460d      	mov	r5, r1
 800582c:	4614      	mov	r4, r2
 800582e:	d50e      	bpl.n	800584e <_svfiprintf_r+0x32>
 8005830:	690b      	ldr	r3, [r1, #16]
 8005832:	b963      	cbnz	r3, 800584e <_svfiprintf_r+0x32>
 8005834:	2140      	movs	r1, #64	; 0x40
 8005836:	f000 fb19 	bl	8005e6c <_malloc_r>
 800583a:	6028      	str	r0, [r5, #0]
 800583c:	6128      	str	r0, [r5, #16]
 800583e:	b920      	cbnz	r0, 800584a <_svfiprintf_r+0x2e>
 8005840:	230c      	movs	r3, #12
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e0d1      	b.n	80059ee <_svfiprintf_r+0x1d2>
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	616b      	str	r3, [r5, #20]
 800584e:	2300      	movs	r3, #0
 8005850:	9309      	str	r3, [sp, #36]	; 0x24
 8005852:	2320      	movs	r3, #32
 8005854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005858:	f8cd 800c 	str.w	r8, [sp, #12]
 800585c:	2330      	movs	r3, #48	; 0x30
 800585e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a08 <_svfiprintf_r+0x1ec>
 8005862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005866:	f04f 0901 	mov.w	r9, #1
 800586a:	4623      	mov	r3, r4
 800586c:	469a      	mov	sl, r3
 800586e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005872:	b10a      	cbz	r2, 8005878 <_svfiprintf_r+0x5c>
 8005874:	2a25      	cmp	r2, #37	; 0x25
 8005876:	d1f9      	bne.n	800586c <_svfiprintf_r+0x50>
 8005878:	ebba 0b04 	subs.w	fp, sl, r4
 800587c:	d00b      	beq.n	8005896 <_svfiprintf_r+0x7a>
 800587e:	465b      	mov	r3, fp
 8005880:	4622      	mov	r2, r4
 8005882:	4629      	mov	r1, r5
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff ff6d 	bl	8005764 <__ssputs_r>
 800588a:	3001      	adds	r0, #1
 800588c:	f000 80aa 	beq.w	80059e4 <_svfiprintf_r+0x1c8>
 8005890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005892:	445a      	add	r2, fp
 8005894:	9209      	str	r2, [sp, #36]	; 0x24
 8005896:	f89a 3000 	ldrb.w	r3, [sl]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a2 	beq.w	80059e4 <_svfiprintf_r+0x1c8>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f04f 32ff 	mov.w	r2, #4294967295
 80058a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058aa:	f10a 0a01 	add.w	sl, sl, #1
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	9307      	str	r3, [sp, #28]
 80058b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058b6:	931a      	str	r3, [sp, #104]	; 0x68
 80058b8:	4654      	mov	r4, sl
 80058ba:	2205      	movs	r2, #5
 80058bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c0:	4851      	ldr	r0, [pc, #324]	; (8005a08 <_svfiprintf_r+0x1ec>)
 80058c2:	f7fa fcb5 	bl	8000230 <memchr>
 80058c6:	9a04      	ldr	r2, [sp, #16]
 80058c8:	b9d8      	cbnz	r0, 8005902 <_svfiprintf_r+0xe6>
 80058ca:	06d0      	lsls	r0, r2, #27
 80058cc:	bf44      	itt	mi
 80058ce:	2320      	movmi	r3, #32
 80058d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058d4:	0711      	lsls	r1, r2, #28
 80058d6:	bf44      	itt	mi
 80058d8:	232b      	movmi	r3, #43	; 0x2b
 80058da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058de:	f89a 3000 	ldrb.w	r3, [sl]
 80058e2:	2b2a      	cmp	r3, #42	; 0x2a
 80058e4:	d015      	beq.n	8005912 <_svfiprintf_r+0xf6>
 80058e6:	9a07      	ldr	r2, [sp, #28]
 80058e8:	4654      	mov	r4, sl
 80058ea:	2000      	movs	r0, #0
 80058ec:	f04f 0c0a 	mov.w	ip, #10
 80058f0:	4621      	mov	r1, r4
 80058f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058f6:	3b30      	subs	r3, #48	; 0x30
 80058f8:	2b09      	cmp	r3, #9
 80058fa:	d94e      	bls.n	800599a <_svfiprintf_r+0x17e>
 80058fc:	b1b0      	cbz	r0, 800592c <_svfiprintf_r+0x110>
 80058fe:	9207      	str	r2, [sp, #28]
 8005900:	e014      	b.n	800592c <_svfiprintf_r+0x110>
 8005902:	eba0 0308 	sub.w	r3, r0, r8
 8005906:	fa09 f303 	lsl.w	r3, r9, r3
 800590a:	4313      	orrs	r3, r2
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	46a2      	mov	sl, r4
 8005910:	e7d2      	b.n	80058b8 <_svfiprintf_r+0x9c>
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	1d19      	adds	r1, r3, #4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	9103      	str	r1, [sp, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	bfbb      	ittet	lt
 800591e:	425b      	neglt	r3, r3
 8005920:	f042 0202 	orrlt.w	r2, r2, #2
 8005924:	9307      	strge	r3, [sp, #28]
 8005926:	9307      	strlt	r3, [sp, #28]
 8005928:	bfb8      	it	lt
 800592a:	9204      	strlt	r2, [sp, #16]
 800592c:	7823      	ldrb	r3, [r4, #0]
 800592e:	2b2e      	cmp	r3, #46	; 0x2e
 8005930:	d10c      	bne.n	800594c <_svfiprintf_r+0x130>
 8005932:	7863      	ldrb	r3, [r4, #1]
 8005934:	2b2a      	cmp	r3, #42	; 0x2a
 8005936:	d135      	bne.n	80059a4 <_svfiprintf_r+0x188>
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	9203      	str	r2, [sp, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfb8      	it	lt
 8005944:	f04f 33ff 	movlt.w	r3, #4294967295
 8005948:	3402      	adds	r4, #2
 800594a:	9305      	str	r3, [sp, #20]
 800594c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a18 <_svfiprintf_r+0x1fc>
 8005950:	7821      	ldrb	r1, [r4, #0]
 8005952:	2203      	movs	r2, #3
 8005954:	4650      	mov	r0, sl
 8005956:	f7fa fc6b 	bl	8000230 <memchr>
 800595a:	b140      	cbz	r0, 800596e <_svfiprintf_r+0x152>
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	eba0 000a 	sub.w	r0, r0, sl
 8005962:	fa03 f000 	lsl.w	r0, r3, r0
 8005966:	9b04      	ldr	r3, [sp, #16]
 8005968:	4303      	orrs	r3, r0
 800596a:	3401      	adds	r4, #1
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005972:	4826      	ldr	r0, [pc, #152]	; (8005a0c <_svfiprintf_r+0x1f0>)
 8005974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005978:	2206      	movs	r2, #6
 800597a:	f7fa fc59 	bl	8000230 <memchr>
 800597e:	2800      	cmp	r0, #0
 8005980:	d038      	beq.n	80059f4 <_svfiprintf_r+0x1d8>
 8005982:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <_svfiprintf_r+0x1f4>)
 8005984:	bb1b      	cbnz	r3, 80059ce <_svfiprintf_r+0x1b2>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	3307      	adds	r3, #7
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	3308      	adds	r3, #8
 8005990:	9303      	str	r3, [sp, #12]
 8005992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005994:	4433      	add	r3, r6
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	e767      	b.n	800586a <_svfiprintf_r+0x4e>
 800599a:	fb0c 3202 	mla	r2, ip, r2, r3
 800599e:	460c      	mov	r4, r1
 80059a0:	2001      	movs	r0, #1
 80059a2:	e7a5      	b.n	80058f0 <_svfiprintf_r+0xd4>
 80059a4:	2300      	movs	r3, #0
 80059a6:	3401      	adds	r4, #1
 80059a8:	9305      	str	r3, [sp, #20]
 80059aa:	4619      	mov	r1, r3
 80059ac:	f04f 0c0a 	mov.w	ip, #10
 80059b0:	4620      	mov	r0, r4
 80059b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059b6:	3a30      	subs	r2, #48	; 0x30
 80059b8:	2a09      	cmp	r2, #9
 80059ba:	d903      	bls.n	80059c4 <_svfiprintf_r+0x1a8>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0c5      	beq.n	800594c <_svfiprintf_r+0x130>
 80059c0:	9105      	str	r1, [sp, #20]
 80059c2:	e7c3      	b.n	800594c <_svfiprintf_r+0x130>
 80059c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80059c8:	4604      	mov	r4, r0
 80059ca:	2301      	movs	r3, #1
 80059cc:	e7f0      	b.n	80059b0 <_svfiprintf_r+0x194>
 80059ce:	ab03      	add	r3, sp, #12
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	462a      	mov	r2, r5
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <_svfiprintf_r+0x1f8>)
 80059d6:	a904      	add	r1, sp, #16
 80059d8:	4638      	mov	r0, r7
 80059da:	f3af 8000 	nop.w
 80059de:	1c42      	adds	r2, r0, #1
 80059e0:	4606      	mov	r6, r0
 80059e2:	d1d6      	bne.n	8005992 <_svfiprintf_r+0x176>
 80059e4:	89ab      	ldrh	r3, [r5, #12]
 80059e6:	065b      	lsls	r3, r3, #25
 80059e8:	f53f af2c 	bmi.w	8005844 <_svfiprintf_r+0x28>
 80059ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ee:	b01d      	add	sp, #116	; 0x74
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	ab03      	add	r3, sp, #12
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	462a      	mov	r2, r5
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <_svfiprintf_r+0x1f8>)
 80059fc:	a904      	add	r1, sp, #16
 80059fe:	4638      	mov	r0, r7
 8005a00:	f000 f87a 	bl	8005af8 <_printf_i>
 8005a04:	e7eb      	b.n	80059de <_svfiprintf_r+0x1c2>
 8005a06:	bf00      	nop
 8005a08:	0800618c 	.word	0x0800618c
 8005a0c:	08006196 	.word	0x08006196
 8005a10:	00000000 	.word	0x00000000
 8005a14:	08005765 	.word	0x08005765
 8005a18:	08006192 	.word	0x08006192

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4616      	mov	r6, r2
 8005a22:	4699      	mov	r9, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a38:	4607      	mov	r7, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_printf_common+0x26>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	0699      	lsls	r1, r3, #26
 8005a46:	bf42      	ittt	mi
 8005a48:	6833      	ldrmi	r3, [r6, #0]
 8005a4a:	3302      	addmi	r3, #2
 8005a4c:	6033      	strmi	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d106      	bne.n	8005a64 <_printf_common+0x48>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	6832      	ldr	r2, [r6, #0]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dc26      	bgt.n	8005ab2 <_printf_common+0x96>
 8005a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a68:	1e13      	subs	r3, r2, #0
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	bf18      	it	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	0692      	lsls	r2, r2, #26
 8005a72:	d42b      	bmi.n	8005acc <_printf_common+0xb0>
 8005a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d01e      	beq.n	8005ac0 <_printf_common+0xa4>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	68e5      	ldr	r5, [r4, #12]
 8005a86:	6832      	ldr	r2, [r6, #0]
 8005a88:	f003 0306 	and.w	r3, r3, #6
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	bf08      	it	eq
 8005a90:	1aad      	subeq	r5, r5, r2
 8005a92:	68a3      	ldr	r3, [r4, #8]
 8005a94:	6922      	ldr	r2, [r4, #16]
 8005a96:	bf0c      	ite	eq
 8005a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a9c:	2500      	movne	r5, #0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfc4      	itt	gt
 8005aa2:	1a9b      	subgt	r3, r3, r2
 8005aa4:	18ed      	addgt	r5, r5, r3
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	341a      	adds	r4, #26
 8005aaa:	42b5      	cmp	r5, r6
 8005aac:	d11a      	bne.n	8005ae4 <_printf_common+0xc8>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e008      	b.n	8005ac4 <_printf_common+0xa8>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c0      	blx	r8
 8005abc:	3001      	adds	r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_printf_common+0xac>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7c6      	b.n	8005a5a <_printf_common+0x3e>
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	2030      	movs	r0, #48	; 0x30
 8005ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	e7c7      	b.n	8005a74 <_printf_common+0x58>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0e6      	beq.n	8005ac0 <_printf_common+0xa4>
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7d9      	b.n	8005aaa <_printf_common+0x8e>
	...

08005af8 <_printf_i>:
 8005af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	7e0f      	ldrb	r7, [r1, #24]
 8005afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b00:	2f78      	cmp	r7, #120	; 0x78
 8005b02:	4691      	mov	r9, r2
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b0e:	d807      	bhi.n	8005b20 <_printf_i+0x28>
 8005b10:	2f62      	cmp	r7, #98	; 0x62
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x32>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	f000 80d8 	beq.w	8005cca <_printf_i+0x1d2>
 8005b1a:	2f58      	cmp	r7, #88	; 0x58
 8005b1c:	f000 80a3 	beq.w	8005c66 <_printf_i+0x16e>
 8005b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b28:	e03a      	b.n	8005ba0 <_printf_i+0xa8>
 8005b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2e:	2b15      	cmp	r3, #21
 8005b30:	d8f6      	bhi.n	8005b20 <_printf_i+0x28>
 8005b32:	a101      	add	r1, pc, #4	; (adr r1, 8005b38 <_printf_i+0x40>)
 8005b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005b21 	.word	0x08005b21
 8005b44:	08005b21 	.word	0x08005b21
 8005b48:	08005b21 	.word	0x08005b21
 8005b4c:	08005b21 	.word	0x08005b21
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005b21 	.word	0x08005b21
 8005b58:	08005b21 	.word	0x08005b21
 8005b5c:	08005b21 	.word	0x08005b21
 8005b60:	08005b21 	.word	0x08005b21
 8005b64:	08005cb1 	.word	0x08005cb1
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005c93 	.word	0x08005c93
 8005b70:	08005b21 	.word	0x08005b21
 8005b74:	08005b21 	.word	0x08005b21
 8005b78:	08005cd3 	.word	0x08005cd3
 8005b7c:	08005b21 	.word	0x08005b21
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005b21 	.word	0x08005b21
 8005b88:	08005b21 	.word	0x08005b21
 8005b8c:	08005c9b 	.word	0x08005c9b
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	602a      	str	r2, [r5, #0]
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0a3      	b.n	8005cec <_printf_i+0x1f4>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	6829      	ldr	r1, [r5, #0]
 8005ba8:	0606      	lsls	r6, r0, #24
 8005baa:	f101 0304 	add.w	r3, r1, #4
 8005bae:	d50a      	bpl.n	8005bc6 <_printf_i+0xce>
 8005bb0:	680e      	ldr	r6, [r1, #0]
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	da03      	bge.n	8005bc0 <_printf_i+0xc8>
 8005bb8:	232d      	movs	r3, #45	; 0x2d
 8005bba:	4276      	negs	r6, r6
 8005bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc0:	485e      	ldr	r0, [pc, #376]	; (8005d3c <_printf_i+0x244>)
 8005bc2:	230a      	movs	r3, #10
 8005bc4:	e019      	b.n	8005bfa <_printf_i+0x102>
 8005bc6:	680e      	ldr	r6, [r1, #0]
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bce:	bf18      	it	ne
 8005bd0:	b236      	sxthne	r6, r6
 8005bd2:	e7ef      	b.n	8005bb4 <_printf_i+0xbc>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	1d19      	adds	r1, r3, #4
 8005bda:	6029      	str	r1, [r5, #0]
 8005bdc:	0601      	lsls	r1, r0, #24
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0xec>
 8005be0:	681e      	ldr	r6, [r3, #0]
 8005be2:	e002      	b.n	8005bea <_printf_i+0xf2>
 8005be4:	0646      	lsls	r6, r0, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0xe8>
 8005be8:	881e      	ldrh	r6, [r3, #0]
 8005bea:	4854      	ldr	r0, [pc, #336]	; (8005d3c <_printf_i+0x244>)
 8005bec:	2f6f      	cmp	r7, #111	; 0x6f
 8005bee:	bf0c      	ite	eq
 8005bf0:	2308      	moveq	r3, #8
 8005bf2:	230a      	movne	r3, #10
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bfa:	6865      	ldr	r5, [r4, #4]
 8005bfc:	60a5      	str	r5, [r4, #8]
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	bfa2      	ittt	ge
 8005c02:	6821      	ldrge	r1, [r4, #0]
 8005c04:	f021 0104 	bicge.w	r1, r1, #4
 8005c08:	6021      	strge	r1, [r4, #0]
 8005c0a:	b90e      	cbnz	r6, 8005c10 <_printf_i+0x118>
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	d04d      	beq.n	8005cac <_printf_i+0x1b4>
 8005c10:	4615      	mov	r5, r2
 8005c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c16:	fb03 6711 	mls	r7, r3, r1, r6
 8005c1a:	5dc7      	ldrb	r7, [r0, r7]
 8005c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c20:	4637      	mov	r7, r6
 8005c22:	42bb      	cmp	r3, r7
 8005c24:	460e      	mov	r6, r1
 8005c26:	d9f4      	bls.n	8005c12 <_printf_i+0x11a>
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d10b      	bne.n	8005c44 <_printf_i+0x14c>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	07de      	lsls	r6, r3, #31
 8005c30:	d508      	bpl.n	8005c44 <_printf_i+0x14c>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	6861      	ldr	r1, [r4, #4]
 8005c36:	4299      	cmp	r1, r3
 8005c38:	bfde      	ittt	le
 8005c3a:	2330      	movle	r3, #48	; 0x30
 8005c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c44:	1b52      	subs	r2, r2, r5
 8005c46:	6122      	str	r2, [r4, #16]
 8005c48:	f8cd a000 	str.w	sl, [sp]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	aa03      	add	r2, sp, #12
 8005c50:	4621      	mov	r1, r4
 8005c52:	4640      	mov	r0, r8
 8005c54:	f7ff fee2 	bl	8005a1c <_printf_common>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d14c      	bne.n	8005cf6 <_printf_i+0x1fe>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	b004      	add	sp, #16
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	4835      	ldr	r0, [pc, #212]	; (8005d3c <_printf_i+0x244>)
 8005c68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c6c:	6829      	ldr	r1, [r5, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c74:	6029      	str	r1, [r5, #0]
 8005c76:	061d      	lsls	r5, r3, #24
 8005c78:	d514      	bpl.n	8005ca4 <_printf_i+0x1ac>
 8005c7a:	07df      	lsls	r7, r3, #31
 8005c7c:	bf44      	itt	mi
 8005c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c82:	6023      	strmi	r3, [r4, #0]
 8005c84:	b91e      	cbnz	r6, 8005c8e <_printf_i+0x196>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f023 0320 	bic.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	2310      	movs	r3, #16
 8005c90:	e7b0      	b.n	8005bf4 <_printf_i+0xfc>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f043 0320 	orr.w	r3, r3, #32
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	2378      	movs	r3, #120	; 0x78
 8005c9c:	4828      	ldr	r0, [pc, #160]	; (8005d40 <_printf_i+0x248>)
 8005c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca2:	e7e3      	b.n	8005c6c <_printf_i+0x174>
 8005ca4:	0659      	lsls	r1, r3, #25
 8005ca6:	bf48      	it	mi
 8005ca8:	b2b6      	uxthmi	r6, r6
 8005caa:	e7e6      	b.n	8005c7a <_printf_i+0x182>
 8005cac:	4615      	mov	r5, r2
 8005cae:	e7bb      	b.n	8005c28 <_printf_i+0x130>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	6826      	ldr	r6, [r4, #0]
 8005cb4:	6961      	ldr	r1, [r4, #20]
 8005cb6:	1d18      	adds	r0, r3, #4
 8005cb8:	6028      	str	r0, [r5, #0]
 8005cba:	0635      	lsls	r5, r6, #24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_i+0x1cc>
 8005cc0:	6019      	str	r1, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <_printf_i+0x1d2>
 8005cc4:	0670      	lsls	r0, r6, #25
 8005cc6:	d5fb      	bpl.n	8005cc0 <_printf_i+0x1c8>
 8005cc8:	8019      	strh	r1, [r3, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	4615      	mov	r5, r2
 8005cd0:	e7ba      	b.n	8005c48 <_printf_i+0x150>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	681d      	ldr	r5, [r3, #0]
 8005cda:	6862      	ldr	r2, [r4, #4]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7fa faa6 	bl	8000230 <memchr>
 8005ce4:	b108      	cbz	r0, 8005cea <_printf_i+0x1f2>
 8005ce6:	1b40      	subs	r0, r0, r5
 8005ce8:	6060      	str	r0, [r4, #4]
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	e7a8      	b.n	8005c48 <_printf_i+0x150>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	47d0      	blx	sl
 8005d00:	3001      	adds	r0, #1
 8005d02:	d0ab      	beq.n	8005c5c <_printf_i+0x164>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	079b      	lsls	r3, r3, #30
 8005d08:	d413      	bmi.n	8005d32 <_printf_i+0x23a>
 8005d0a:	68e0      	ldr	r0, [r4, #12]
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	bfb8      	it	lt
 8005d12:	4618      	movlt	r0, r3
 8005d14:	e7a4      	b.n	8005c60 <_printf_i+0x168>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	47d0      	blx	sl
 8005d20:	3001      	adds	r0, #1
 8005d22:	d09b      	beq.n	8005c5c <_printf_i+0x164>
 8005d24:	3501      	adds	r5, #1
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	9903      	ldr	r1, [sp, #12]
 8005d2a:	1a5b      	subs	r3, r3, r1
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dcf2      	bgt.n	8005d16 <_printf_i+0x21e>
 8005d30:	e7eb      	b.n	8005d0a <_printf_i+0x212>
 8005d32:	2500      	movs	r5, #0
 8005d34:	f104 0619 	add.w	r6, r4, #25
 8005d38:	e7f5      	b.n	8005d26 <_printf_i+0x22e>
 8005d3a:	bf00      	nop
 8005d3c:	0800619d 	.word	0x0800619d
 8005d40:	080061ae 	.word	0x080061ae

08005d44 <memcpy>:
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xc>
 8005d4e:	4770      	bx	lr
 8005d50:	b510      	push	{r4, lr}
 8005d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5a:	4291      	cmp	r1, r2
 8005d5c:	d1f9      	bne.n	8005d52 <memcpy+0xe>
 8005d5e:	bd10      	pop	{r4, pc}

08005d60 <memmove>:
 8005d60:	4288      	cmp	r0, r1
 8005d62:	b510      	push	{r4, lr}
 8005d64:	eb01 0402 	add.w	r4, r1, r2
 8005d68:	d902      	bls.n	8005d70 <memmove+0x10>
 8005d6a:	4284      	cmp	r4, r0
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	d807      	bhi.n	8005d80 <memmove+0x20>
 8005d70:	1e43      	subs	r3, r0, #1
 8005d72:	42a1      	cmp	r1, r4
 8005d74:	d008      	beq.n	8005d88 <memmove+0x28>
 8005d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d7e:	e7f8      	b.n	8005d72 <memmove+0x12>
 8005d80:	4402      	add	r2, r0
 8005d82:	4601      	mov	r1, r0
 8005d84:	428a      	cmp	r2, r1
 8005d86:	d100      	bne.n	8005d8a <memmove+0x2a>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d92:	e7f7      	b.n	8005d84 <memmove+0x24>

08005d94 <_free_r>:
 8005d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d96:	2900      	cmp	r1, #0
 8005d98:	d044      	beq.n	8005e24 <_free_r+0x90>
 8005d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9e:	9001      	str	r0, [sp, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f1a1 0404 	sub.w	r4, r1, #4
 8005da6:	bfb8      	it	lt
 8005da8:	18e4      	addlt	r4, r4, r3
 8005daa:	f000 f913 	bl	8005fd4 <__malloc_lock>
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <_free_r+0x94>)
 8005db0:	9801      	ldr	r0, [sp, #4]
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	b933      	cbnz	r3, 8005dc4 <_free_r+0x30>
 8005db6:	6063      	str	r3, [r4, #4]
 8005db8:	6014      	str	r4, [r2, #0]
 8005dba:	b003      	add	sp, #12
 8005dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dc0:	f000 b90e 	b.w	8005fe0 <__malloc_unlock>
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d908      	bls.n	8005dda <_free_r+0x46>
 8005dc8:	6825      	ldr	r5, [r4, #0]
 8005dca:	1961      	adds	r1, r4, r5
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	bf01      	itttt	eq
 8005dd0:	6819      	ldreq	r1, [r3, #0]
 8005dd2:	685b      	ldreq	r3, [r3, #4]
 8005dd4:	1949      	addeq	r1, r1, r5
 8005dd6:	6021      	streq	r1, [r4, #0]
 8005dd8:	e7ed      	b.n	8005db6 <_free_r+0x22>
 8005dda:	461a      	mov	r2, r3
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b10b      	cbz	r3, 8005de4 <_free_r+0x50>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d9fa      	bls.n	8005dda <_free_r+0x46>
 8005de4:	6811      	ldr	r1, [r2, #0]
 8005de6:	1855      	adds	r5, r2, r1
 8005de8:	42a5      	cmp	r5, r4
 8005dea:	d10b      	bne.n	8005e04 <_free_r+0x70>
 8005dec:	6824      	ldr	r4, [r4, #0]
 8005dee:	4421      	add	r1, r4
 8005df0:	1854      	adds	r4, r2, r1
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	d1e0      	bne.n	8005dba <_free_r+0x26>
 8005df8:	681c      	ldr	r4, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	6053      	str	r3, [r2, #4]
 8005dfe:	4421      	add	r1, r4
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	e7da      	b.n	8005dba <_free_r+0x26>
 8005e04:	d902      	bls.n	8005e0c <_free_r+0x78>
 8005e06:	230c      	movs	r3, #12
 8005e08:	6003      	str	r3, [r0, #0]
 8005e0a:	e7d6      	b.n	8005dba <_free_r+0x26>
 8005e0c:	6825      	ldr	r5, [r4, #0]
 8005e0e:	1961      	adds	r1, r4, r5
 8005e10:	428b      	cmp	r3, r1
 8005e12:	bf04      	itt	eq
 8005e14:	6819      	ldreq	r1, [r3, #0]
 8005e16:	685b      	ldreq	r3, [r3, #4]
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	bf04      	itt	eq
 8005e1c:	1949      	addeq	r1, r1, r5
 8005e1e:	6021      	streq	r1, [r4, #0]
 8005e20:	6054      	str	r4, [r2, #4]
 8005e22:	e7ca      	b.n	8005dba <_free_r+0x26>
 8005e24:	b003      	add	sp, #12
 8005e26:	bd30      	pop	{r4, r5, pc}
 8005e28:	200001e0 	.word	0x200001e0

08005e2c <sbrk_aligned>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4e0e      	ldr	r6, [pc, #56]	; (8005e68 <sbrk_aligned+0x3c>)
 8005e30:	460c      	mov	r4, r1
 8005e32:	6831      	ldr	r1, [r6, #0]
 8005e34:	4605      	mov	r5, r0
 8005e36:	b911      	cbnz	r1, 8005e3e <sbrk_aligned+0x12>
 8005e38:	f000 f8bc 	bl	8005fb4 <_sbrk_r>
 8005e3c:	6030      	str	r0, [r6, #0]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 f8b7 	bl	8005fb4 <_sbrk_r>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d00a      	beq.n	8005e60 <sbrk_aligned+0x34>
 8005e4a:	1cc4      	adds	r4, r0, #3
 8005e4c:	f024 0403 	bic.w	r4, r4, #3
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d007      	beq.n	8005e64 <sbrk_aligned+0x38>
 8005e54:	1a21      	subs	r1, r4, r0
 8005e56:	4628      	mov	r0, r5
 8005e58:	f000 f8ac 	bl	8005fb4 <_sbrk_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d101      	bne.n	8005e64 <sbrk_aligned+0x38>
 8005e60:	f04f 34ff 	mov.w	r4, #4294967295
 8005e64:	4620      	mov	r0, r4
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	200001e4 	.word	0x200001e4

08005e6c <_malloc_r>:
 8005e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e70:	1ccd      	adds	r5, r1, #3
 8005e72:	f025 0503 	bic.w	r5, r5, #3
 8005e76:	3508      	adds	r5, #8
 8005e78:	2d0c      	cmp	r5, #12
 8005e7a:	bf38      	it	cc
 8005e7c:	250c      	movcc	r5, #12
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	4607      	mov	r7, r0
 8005e82:	db01      	blt.n	8005e88 <_malloc_r+0x1c>
 8005e84:	42a9      	cmp	r1, r5
 8005e86:	d905      	bls.n	8005e94 <_malloc_r+0x28>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	4630      	mov	r0, r6
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e94:	4e2e      	ldr	r6, [pc, #184]	; (8005f50 <_malloc_r+0xe4>)
 8005e96:	f000 f89d 	bl	8005fd4 <__malloc_lock>
 8005e9a:	6833      	ldr	r3, [r6, #0]
 8005e9c:	461c      	mov	r4, r3
 8005e9e:	bb34      	cbnz	r4, 8005eee <_malloc_r+0x82>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f7ff ffc2 	bl	8005e2c <sbrk_aligned>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	4604      	mov	r4, r0
 8005eac:	d14d      	bne.n	8005f4a <_malloc_r+0xde>
 8005eae:	6834      	ldr	r4, [r6, #0]
 8005eb0:	4626      	mov	r6, r4
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	d140      	bne.n	8005f38 <_malloc_r+0xcc>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4638      	mov	r0, r7
 8005ebc:	eb04 0803 	add.w	r8, r4, r3
 8005ec0:	f000 f878 	bl	8005fb4 <_sbrk_r>
 8005ec4:	4580      	cmp	r8, r0
 8005ec6:	d13a      	bne.n	8005f3e <_malloc_r+0xd2>
 8005ec8:	6821      	ldr	r1, [r4, #0]
 8005eca:	3503      	adds	r5, #3
 8005ecc:	1a6d      	subs	r5, r5, r1
 8005ece:	f025 0503 	bic.w	r5, r5, #3
 8005ed2:	3508      	adds	r5, #8
 8005ed4:	2d0c      	cmp	r5, #12
 8005ed6:	bf38      	it	cc
 8005ed8:	250c      	movcc	r5, #12
 8005eda:	4629      	mov	r1, r5
 8005edc:	4638      	mov	r0, r7
 8005ede:	f7ff ffa5 	bl	8005e2c <sbrk_aligned>
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d02b      	beq.n	8005f3e <_malloc_r+0xd2>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	442b      	add	r3, r5
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	e00e      	b.n	8005f0c <_malloc_r+0xa0>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	1b52      	subs	r2, r2, r5
 8005ef2:	d41e      	bmi.n	8005f32 <_malloc_r+0xc6>
 8005ef4:	2a0b      	cmp	r2, #11
 8005ef6:	d916      	bls.n	8005f26 <_malloc_r+0xba>
 8005ef8:	1961      	adds	r1, r4, r5
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	6025      	str	r5, [r4, #0]
 8005efe:	bf18      	it	ne
 8005f00:	6059      	strne	r1, [r3, #4]
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	bf08      	it	eq
 8005f06:	6031      	streq	r1, [r6, #0]
 8005f08:	5162      	str	r2, [r4, r5]
 8005f0a:	604b      	str	r3, [r1, #4]
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f104 060b 	add.w	r6, r4, #11
 8005f12:	f000 f865 	bl	8005fe0 <__malloc_unlock>
 8005f16:	f026 0607 	bic.w	r6, r6, #7
 8005f1a:	1d23      	adds	r3, r4, #4
 8005f1c:	1af2      	subs	r2, r6, r3
 8005f1e:	d0b6      	beq.n	8005e8e <_malloc_r+0x22>
 8005f20:	1b9b      	subs	r3, r3, r6
 8005f22:	50a3      	str	r3, [r4, r2]
 8005f24:	e7b3      	b.n	8005e8e <_malloc_r+0x22>
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	bf0c      	ite	eq
 8005f2c:	6032      	streq	r2, [r6, #0]
 8005f2e:	605a      	strne	r2, [r3, #4]
 8005f30:	e7ec      	b.n	8005f0c <_malloc_r+0xa0>
 8005f32:	4623      	mov	r3, r4
 8005f34:	6864      	ldr	r4, [r4, #4]
 8005f36:	e7b2      	b.n	8005e9e <_malloc_r+0x32>
 8005f38:	4634      	mov	r4, r6
 8005f3a:	6876      	ldr	r6, [r6, #4]
 8005f3c:	e7b9      	b.n	8005eb2 <_malloc_r+0x46>
 8005f3e:	230c      	movs	r3, #12
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4638      	mov	r0, r7
 8005f44:	f000 f84c 	bl	8005fe0 <__malloc_unlock>
 8005f48:	e7a1      	b.n	8005e8e <_malloc_r+0x22>
 8005f4a:	6025      	str	r5, [r4, #0]
 8005f4c:	e7de      	b.n	8005f0c <_malloc_r+0xa0>
 8005f4e:	bf00      	nop
 8005f50:	200001e0 	.word	0x200001e0

08005f54 <_realloc_r>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	460e      	mov	r6, r1
 8005f5e:	b921      	cbnz	r1, 8005f6a <_realloc_r+0x16>
 8005f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f64:	4611      	mov	r1, r2
 8005f66:	f7ff bf81 	b.w	8005e6c <_malloc_r>
 8005f6a:	b92a      	cbnz	r2, 8005f78 <_realloc_r+0x24>
 8005f6c:	f7ff ff12 	bl	8005d94 <_free_r>
 8005f70:	4625      	mov	r5, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f78:	f000 f838 	bl	8005fec <_malloc_usable_size_r>
 8005f7c:	4284      	cmp	r4, r0
 8005f7e:	4607      	mov	r7, r0
 8005f80:	d802      	bhi.n	8005f88 <_realloc_r+0x34>
 8005f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f86:	d812      	bhi.n	8005fae <_realloc_r+0x5a>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	f7ff ff6e 	bl	8005e6c <_malloc_r>
 8005f90:	4605      	mov	r5, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d0ed      	beq.n	8005f72 <_realloc_r+0x1e>
 8005f96:	42bc      	cmp	r4, r7
 8005f98:	4622      	mov	r2, r4
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	bf28      	it	cs
 8005f9e:	463a      	movcs	r2, r7
 8005fa0:	f7ff fed0 	bl	8005d44 <memcpy>
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fef4 	bl	8005d94 <_free_r>
 8005fac:	e7e1      	b.n	8005f72 <_realloc_r+0x1e>
 8005fae:	4635      	mov	r5, r6
 8005fb0:	e7df      	b.n	8005f72 <_realloc_r+0x1e>
	...

08005fb4 <_sbrk_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d06      	ldr	r5, [pc, #24]	; (8005fd0 <_sbrk_r+0x1c>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fb fdda 	bl	8001b78 <_sbrk>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_sbrk_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_sbrk_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200001e8 	.word	0x200001e8

08005fd4 <__malloc_lock>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__malloc_lock+0x8>)
 8005fd6:	f000 b811 	b.w	8005ffc <__retarget_lock_acquire_recursive>
 8005fda:	bf00      	nop
 8005fdc:	200001ec 	.word	0x200001ec

08005fe0 <__malloc_unlock>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__malloc_unlock+0x8>)
 8005fe2:	f000 b80c 	b.w	8005ffe <__retarget_lock_release_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	200001ec 	.word	0x200001ec

08005fec <_malloc_usable_size_r>:
 8005fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff0:	1f18      	subs	r0, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bfbc      	itt	lt
 8005ff6:	580b      	ldrlt	r3, [r1, r0]
 8005ff8:	18c0      	addlt	r0, r0, r3
 8005ffa:	4770      	bx	lr

08005ffc <__retarget_lock_acquire_recursive>:
 8005ffc:	4770      	bx	lr

08005ffe <__retarget_lock_release_recursive>:
 8005ffe:	4770      	bx	lr

08006000 <abort>:
 8006000:	b508      	push	{r3, lr}
 8006002:	2006      	movs	r0, #6
 8006004:	f000 f82c 	bl	8006060 <raise>
 8006008:	2001      	movs	r0, #1
 800600a:	f7fb fdab 	bl	8001b64 <_exit>

0800600e <_raise_r>:
 800600e:	291f      	cmp	r1, #31
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	460d      	mov	r5, r1
 8006016:	d904      	bls.n	8006022 <_raise_r+0x14>
 8006018:	2316      	movs	r3, #22
 800601a:	6003      	str	r3, [r0, #0]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	bd38      	pop	{r3, r4, r5, pc}
 8006022:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006024:	b112      	cbz	r2, 800602c <_raise_r+0x1e>
 8006026:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800602a:	b94b      	cbnz	r3, 8006040 <_raise_r+0x32>
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f831 	bl	8006094 <_getpid_r>
 8006032:	462a      	mov	r2, r5
 8006034:	4601      	mov	r1, r0
 8006036:	4620      	mov	r0, r4
 8006038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800603c:	f000 b818 	b.w	8006070 <_kill_r>
 8006040:	2b01      	cmp	r3, #1
 8006042:	d00a      	beq.n	800605a <_raise_r+0x4c>
 8006044:	1c59      	adds	r1, r3, #1
 8006046:	d103      	bne.n	8006050 <_raise_r+0x42>
 8006048:	2316      	movs	r3, #22
 800604a:	6003      	str	r3, [r0, #0]
 800604c:	2001      	movs	r0, #1
 800604e:	e7e7      	b.n	8006020 <_raise_r+0x12>
 8006050:	2400      	movs	r4, #0
 8006052:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006056:	4628      	mov	r0, r5
 8006058:	4798      	blx	r3
 800605a:	2000      	movs	r0, #0
 800605c:	e7e0      	b.n	8006020 <_raise_r+0x12>
	...

08006060 <raise>:
 8006060:	4b02      	ldr	r3, [pc, #8]	; (800606c <raise+0xc>)
 8006062:	4601      	mov	r1, r0
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f7ff bfd2 	b.w	800600e <_raise_r>
 800606a:	bf00      	nop
 800606c:	2000000c 	.word	0x2000000c

08006070 <_kill_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	; (8006090 <_kill_r+0x20>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	4611      	mov	r1, r2
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	f7fb fd61 	bl	8001b44 <_kill>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d102      	bne.n	800608c <_kill_r+0x1c>
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	b103      	cbz	r3, 800608c <_kill_r+0x1c>
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	bd38      	pop	{r3, r4, r5, pc}
 800608e:	bf00      	nop
 8006090:	200001e8 	.word	0x200001e8

08006094 <_getpid_r>:
 8006094:	f7fb bd4e 	b.w	8001b34 <_getpid>

08006098 <_init>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr

080060a4 <_fini>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr
